declare type ColorData = number[];
export declare type ColorBase = Color | ColorData | string | number;
export declare class Color {
    private _data;
    static fromArray(vals: ColorData, base256?: boolean): Color;
    static fromString(css: string): Color;
    static fromNumber(val: number, base256?: boolean): Color;
    static make(arg: ColorBase, base256?: boolean): Color;
    static from(arg: ColorBase, base256?: boolean): Color;
    constructor(r?: number, g?: number, b?: number, rand?: number, redRand?: number, greenRand?: number, blueRand?: number);
    get r(): number;
    private get _r();
    private set _r(value);
    get g(): number;
    private get _g();
    private set _g(value);
    get b(): number;
    private get _b();
    private set _b(value);
    private get _rand();
    private get _redRand();
    private get _greenRand();
    private get _blueRand();
    get l(): number;
    get s(): number;
    get h(): number;
    isNull(): boolean;
    equals(other: ColorBase): boolean;
    copy(other: ColorBase): this;
    protected _changed(): this;
    clone(): any;
    set(_r?: number, _g?: number, _b?: number, _rand?: number, _redRand?: number, _greenRand?: number, _blueRand?: number): this;
    setRGB(_r?: number, _g?: number, _b?: number, _rand?: number, _redRand?: number, _greenRand?: number, _blueRand?: number): this;
    nullify(): this;
    blackOut(): this;
    toInt(base256?: boolean): number;
    fromInt(val: number, base256?: boolean): this;
    clamp(): this;
    mix(other: ColorBase, percent: number): this;
    lighten(percent: number): this | undefined;
    darken(percent: number): this | undefined;
    bake(): this;
    add(other: ColorBase, percent?: number): this;
    scale(percent: number): this;
    multiply(other: number[] | ColorBase): this;
    normalize(): this;
    css(base256?: boolean): string;
    toString(base256?: boolean): string;
    static separate(a: Color, b: Color): void;
}
export {};
