{"version":3,"file":"gw-canvas.min.js","sources":["../js/utils.js","../js/shaders.js","../js/canvas.js","../js/glyphs.js","../js/config.js","../js/color.js","../js/buffer.js","../js/mixer.js","../js/index.js"],"sourcesContent":["// Copy of: https://github.com/ondras/fastiles/blob/master/ts/utils.ts (v2.1.0)\nexport const QUAD = [\n    0, 0, 1, 0, 0, 1,\n    0, 1, 1, 0, 1, 1\n];\nexport function createProgram(gl, ...sources) {\n    const p = gl.createProgram();\n    [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, index) => {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, sources[index]);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            throw new Error(gl.getShaderInfoLog(shader));\n        }\n        gl.attachShader(p, shader);\n    });\n    gl.linkProgram(p);\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(p));\n    }\n    return p;\n}\nexport function createTexture(gl) {\n    let t = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, t);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    return t;\n}\nexport function createGeometry(gl, attribs, width, height) {\n    let tileCount = width * height;\n    let positionData = new Uint16Array(tileCount * QUAD.length);\n    let uvData = new Uint8Array(tileCount * QUAD.length);\n    let i = 0;\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            QUAD.forEach(value => {\n                positionData[i] = (i % 2 ? y : x) + value;\n                uvData[i] = value;\n                i++;\n            });\n        }\n    }\n    const position = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\n    gl.vertexAttribIPointer(attribs[\"position\"], 2, gl.UNSIGNED_SHORT, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\n    const uv = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, uv);\n    gl.vertexAttribIPointer(attribs[\"uv\"], 2, gl.UNSIGNED_BYTE, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, uvData, gl.STATIC_DRAW);\n    return { position, uv };\n}\n","// Based on: https://github.com/ondras/fastiles/blob/master/ts/shaders.ts (v2.1.0)\nexport const VS = `\n#version 300 es\nin uvec2 position;\nin uvec2 uv;\nin uint style;\nout vec2 fsUv;\nflat out uint fsStyle;\nuniform highp uvec2 tileSize;\nuniform uvec2 viewportSize;\nvoid main() {\n\tivec2 positionPx = ivec2(position * tileSize);\n\tvec2 positionNdc = (vec2(positionPx * 2) / vec2(viewportSize))-1.0;\n\tpositionNdc.y *= -1.0;\n\tgl_Position = vec4(positionNdc, 0.0, 1.0);\n\tfsUv = vec2(uv);\n\tfsStyle = style;\n}`.trim();\nexport const FS = `\n#version 300 es\nprecision highp float;\nin vec2 fsUv;\nflat in uint fsStyle;\nout vec4 fragColor;\nuniform sampler2D font;\nuniform highp uvec2 tileSize;\nvoid main() {\n\tuvec2 fontTiles = uvec2(textureSize(font, 0)) / tileSize;\n\n\tuint glyph = (fsStyle & uint(0xFF000000)) >> 24;\n\tuint glyphX = (glyph & uint(0xF));\n\tuint glyphY = (glyph >> 4);\n\tuvec2 fontPosition = uvec2(glyphX, glyphY);\n\n\tuvec2 fontPx = (tileSize * fontPosition) + uvec2(vec2(tileSize) * fsUv);\n\tvec3 texel = texelFetch(font, ivec2(fontPx), 0).rgb;\n\n\tfloat s = 15.0;\n\tuint fr = (fsStyle & uint(0xF00)) >> 8;\n\tuint fg = (fsStyle & uint(0x0F0)) >> 4;\n\tuint fb = (fsStyle & uint(0x00F)) >> 0;\n\tvec3 fgRgb = vec3(fr, fg, fb) / s;\n  \n\tuint br = (fsStyle & uint(0xF00000)) >> 20;\n\tuint bg = (fsStyle & uint(0x0F0000)) >> 16;\n\tuint bb = (fsStyle & uint(0x00F000)) >> 12;\n\tvec3 bgRgb = vec3(br, bg, bb) / s;\n  \n\tfragColor = vec4(mix(bgRgb, fgRgb, texel), 1.0);\n}`.trim();\n","// Based on: https://github.com/ondras/fastiles/blob/master/ts/scene.ts (v2.1.0)\nimport { createProgram, createTexture, createGeometry } from \"./utils\";\nimport * as shaders from \"./shaders\";\nconst VERTICES_PER_TILE = 6;\nexport class Canvas {\n    constructor(options) {\n        this._data = new Uint32Array();\n        this._buffers = {};\n        this._attribs = {};\n        this._uniforms = {};\n        this._renderRequested = false;\n        this._autoRender = true;\n        this._width = 50;\n        this._height = 25;\n        if (!options.glyphs)\n            throw new Error('You must supply glyphs for the canvas.');\n        this._gl = this._initGL(options.node);\n        this._configure(options);\n    }\n    get node() { return this._gl.canvas; }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    get tileWidth() { return this._glyphs.tileWidth; }\n    get tileHeight() { return this._glyphs.tileHeight; }\n    get pxWidth() { return this.node.clientWidth; }\n    get pxHeight() { return this.node.clientHeight; }\n    get glyphs() { return this._glyphs; }\n    set glyphs(glyphs) {\n        const gl = this._gl;\n        const uniforms = this._uniforms;\n        if (glyphs === this._glyphs && !glyphs.needsUpdate)\n            return;\n        if (glyphs !== this._glyphs) {\n            this._glyphs = glyphs;\n            this.resize(this._width, this._height);\n            gl.uniform2uiv(uniforms[\"tileSize\"], [this.tileWidth, this.tileHeight]);\n        }\n        this._uploadGlyphs();\n    }\n    _configure(options) {\n        this._width = options.width || this._width;\n        this._height = options.height || this._height;\n        this._autoRender = (options.render !== false);\n        this.glyphs = options.glyphs;\n    }\n    resize(width, height) {\n        this._width = width;\n        this._height = height;\n        const node = this.node;\n        node.width = this._width * this.tileWidth;\n        node.height = this._height * this.tileHeight;\n        const gl = this._gl;\n        const uniforms = this._uniforms;\n        gl.viewport(0, 0, node.width, node.height);\n        gl.uniform2ui(uniforms[\"viewportSize\"], node.width, node.height);\n        this._createGeometry();\n        this._createData();\n    }\n    draw(x, y, glyph, fg, bg) {\n        let index = y * this._width + x;\n        index *= VERTICES_PER_TILE;\n        glyph = glyph & 0xFF;\n        bg = bg & 0xFFF;\n        fg = fg & 0xFFF;\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data[index + 2] = style;\n        this._data[index + 5] = style;\n        this._requestRender();\n    }\n    copy(buffer) {\n        buffer.data.forEach((style, i) => {\n            const index = i * VERTICES_PER_TILE;\n            this._data[index + 2] = style;\n            this._data[index + 5] = style;\n        });\n        this._requestRender();\n    }\n    copyTo(buffer) {\n        const n = this.width * this.height;\n        const dest = buffer.data;\n        for (let i = 0; i < n; ++i) {\n            const index = i * VERTICES_PER_TILE;\n            dest[i] = this._data[index + 2];\n        }\n    }\n    _initGL(node) {\n        if (typeof node === 'string') {\n            const el = document.getElementById(node);\n            if (!el)\n                throw new Error('Failed to find element with id:' + node);\n            if (!(el instanceof HTMLCanvasElement)) {\n                node = document.createElement('canvas');\n                el.appendChild(node);\n            }\n            else {\n                node = el;\n            }\n        }\n        else if (!node) {\n            node = document.createElement(\"canvas\");\n        }\n        let gl = node.getContext(\"webgl2\");\n        if (!gl) {\n            throw new Error(\"WebGL 2 not supported\");\n        }\n        const p = createProgram(gl, shaders.VS, shaders.FS);\n        gl.useProgram(p);\n        const attributeCount = gl.getProgramParameter(p, gl.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < attributeCount; i++) {\n            gl.enableVertexAttribArray(i);\n            let info = gl.getActiveAttrib(p, i);\n            this._attribs[info.name] = i;\n        }\n        const uniformCount = gl.getProgramParameter(p, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < uniformCount; i++) {\n            let info = gl.getActiveUniform(p, i);\n            this._uniforms[info.name] = gl.getUniformLocation(p, info.name);\n        }\n        gl.uniform1i(this._uniforms[\"font\"], 0);\n        this._texture = createTexture(gl);\n        return gl;\n    }\n    _createGeometry() {\n        const gl = this._gl;\n        this._buffers.position && gl.deleteBuffer(this._buffers.position);\n        this._buffers.uv && gl.deleteBuffer(this._buffers.uv);\n        let buffers = createGeometry(gl, this._attribs, this._width, this._height);\n        Object.assign(this._buffers, buffers);\n    }\n    _createData() {\n        const gl = this._gl;\n        const attribs = this._attribs;\n        const tileCount = this._width * this._height;\n        this._buffers.style && gl.deleteBuffer(this._buffers.style);\n        this._data = new Uint32Array(tileCount * VERTICES_PER_TILE);\n        const style = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, style);\n        gl.vertexAttribIPointer(attribs[\"style\"], 1, gl.UNSIGNED_INT, 0, 0);\n        Object.assign(this._buffers, { style });\n    }\n    _requestRender() {\n        if (this._renderRequested)\n            return;\n        this._renderRequested = true;\n        if (!this._autoRender)\n            return;\n        requestAnimationFrame(() => this.render());\n    }\n    render() {\n        const gl = this._gl;\n        if (this._glyphs.needsUpdate) { // auto keep glyphs up to date\n            this._uploadGlyphs();\n        }\n        else if (!this._renderRequested) {\n            return;\n        }\n        this._renderRequested = false;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._buffers.style);\n        gl.bufferData(gl.ARRAY_BUFFER, this._data, gl.DYNAMIC_DRAW);\n        gl.drawArrays(gl.TRIANGLES, 0, this._width * this._height * VERTICES_PER_TILE);\n    }\n    _uploadGlyphs() {\n        if (!this._glyphs.needsUpdate)\n            return;\n        const gl = this._gl;\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._glyphs.node);\n        this._requestRender();\n        this._glyphs.needsUpdate = false;\n    }\n    hasXY(x, y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n    toX(x) {\n        return Math.floor(this.width * x / this.node.clientWidth);\n    }\n    toY(y) {\n        return Math.floor(this.height * y / this.node.clientHeight);\n    }\n}\n","export class Glyphs {\n    constructor(opts = {}) {\n        this._tileWidth = 12;\n        this._tileHeight = 16;\n        this.needsUpdate = true;\n        this._map = {};\n        opts.font = opts.font || 'monospace';\n        this._node = document.createElement('canvas');\n        this._ctx = this.node.getContext('2d');\n        this._configure(opts);\n    }\n    static fromImage(src) {\n        if (typeof src === 'string') {\n            if (src.startsWith('data:'))\n                throw new Error('Glyph: You must load a data string into an image element and use that.');\n            const el = document.getElementById(src);\n            if (!el)\n                throw new Error('Glyph: Failed to find image element with id:' + src);\n            src = el;\n        }\n        const glyph = new this({ tileWidth: src.width / 16, tileHeight: src.height / 16 });\n        glyph._ctx.drawImage(src, 0, 0);\n        return glyph;\n    }\n    static fromFont(src) {\n        if (typeof src === 'string') {\n            src = { font: src };\n        }\n        const glyphs = new this(src);\n        const basicOnly = src.basicOnly || src.basic || false;\n        glyphs._initGlyphs(basicOnly);\n        return glyphs;\n    }\n    get node() { return this._node; }\n    get tileWidth() { return this._tileWidth; }\n    get tileHeight() { return this._tileHeight; }\n    get pxWidth() { return this._node.width; }\n    get pxHeight() { return this._node.height; }\n    forChar(ch) {\n        if (ch === null || ch === undefined)\n            return -1;\n        return this._map[ch] || -1;\n    }\n    _configure(opts) {\n        this._tileWidth = opts.tileWidth || this.tileWidth;\n        this._tileHeight = opts.tileHeight || this.tileHeight;\n        this.node.width = 16 * this.tileWidth;\n        this.node.height = 16 * this.tileHeight;\n        this._ctx.fillStyle = 'black';\n        this._ctx.fillRect(0, 0, this.pxWidth, this.pxHeight);\n        const size = opts.fontSize || opts.size || Math.max(this.tileWidth, this.tileHeight);\n        this._ctx.font = '' + size + 'px ' + opts.font;\n        this._ctx.textAlign = 'center';\n        this._ctx.textBaseline = 'middle';\n        this._ctx.fillStyle = 'white';\n    }\n    draw(n, ch) {\n        if (n > 256)\n            throw new Error('Cannot draw more than 256 glyphs.');\n        const x = (n % 16) * this.tileWidth;\n        const y = Math.floor(n / 16) * this.tileHeight;\n        const cx = x + Math.floor(this.tileWidth / 2);\n        const cy = y + Math.floor(this.tileHeight / 2);\n        this._ctx.save();\n        this._ctx.beginPath();\n        this._ctx.rect(x, y, this.tileWidth, this.tileHeight);\n        this._ctx.clip();\n        if (typeof ch === 'function') {\n            ch(this._ctx, x, y, this.tileWidth, this.tileHeight);\n        }\n        else {\n            if (this._map[ch] === undefined)\n                this._map[ch] = n;\n            this._ctx.fillText(ch, cx, cy);\n        }\n        this._ctx.restore();\n        this.needsUpdate = true;\n    }\n    _initGlyphs(basicOnly = false) {\n        for (let i = 32; i < 127; ++i) {\n            this.draw(i, String.fromCharCode(i));\n        }\n        if (!basicOnly) {\n            [' ', '\\u263a', '\\u263b', '\\u2665', '\\u2666', '\\u2663', '\\u2660', '\\u263c',\n                '\\u2600', '\\u2605', '\\u2606', '\\u2642', '\\u2640', '\\u266a', '\\u266b', '\\u2638',\n                '\\u25b6', '\\u25c0', '\\u2195', '\\u203c', '\\u204b', '\\u262f', '\\u2318', '\\u2616',\n                '\\u2191', '\\u2193', '\\u2192', '\\u2190', '\\u2126', '\\u2194', '\\u25b2', '\\u25bc',\n            ].forEach((ch, i) => {\n                this.draw(i, ch);\n            });\n            // [\n            // '\\u2302',\n            // '\\u2b09', '\\u272a', '\\u2718', '\\u2610', '\\u2611', '\\u25ef', '\\u25ce', '\\u2690',\n            // '\\u2691', '\\u2598', '\\u2596', '\\u259d', '\\u2597', '\\u2744', '\\u272d', '\\u2727',\n            // '\\u25e3', '\\u25e4', '\\u25e2', '\\u25e5', '\\u25a8', '\\u25a7', '\\u259a', '\\u265f',\n            // '\\u265c', '\\u265e', '\\u265d', '\\u265b', '\\u265a', '\\u301c', '\\u2694', '\\u2692',\n            // '\\u25b6', '\\u25bc', '\\u25c0', '\\u25b2', '\\u25a4', '\\u25a5', '\\u25a6', '\\u257a',\n            // '\\u257b', '\\u2578', '\\u2579', '\\u2581', '\\u2594', '\\u258f', '\\u2595', '\\u272d',\n            // '\\u2591', '\\u2592', '\\u2593', '\\u2503', '\\u252b', '\\u2561', '\\u2562', '\\u2556',\n            // '\\u2555', '\\u2563', '\\u2551', '\\u2557', '\\u255d', '\\u255c', '\\u255b', '\\u2513',\n            // '\\u2517', '\\u253b', '\\u2533', '\\u2523', '\\u2501', '\\u254b', '\\u255e', '\\u255f',\n            // '\\u255a', '\\u2554', '\\u2569', '\\u2566', '\\u2560', '\\u2550', '\\u256c', '\\u2567',\n            // '\\u2568', '\\u2564', '\\u2565', '\\u2559', '\\u2558', '\\u2552', '\\u2553', '\\u256b',\n            // '\\u256a', '\\u251b', '\\u250f', '\\u2588', '\\u2585', '\\u258c', '\\u2590', '\\u2580',\n            // '\\u03b1', '\\u03b2', '\\u0393', '\\u03c0', '\\u03a3', '\\u03c3', '\\u03bc', '\\u03c4',\n            // '\\u03a6', '\\u03b8', '\\u03a9', '\\u03b4', '\\u221e', '\\u03b8', '\\u03b5', '\\u03b7',\n            // '\\u039e', '\\u00b1', '\\u2265', '\\u2264', '\\u2234', '\\u2237', '\\u00f7', '\\u2248',\n            // '\\u22c4', '\\u22c5', '\\u2217', '\\u27b5', '\\u2620', '\\u2625', '\\u25fc', '\\u25fb'\n            // ].forEach( (ch, i) => {\n            //   this.draw(i + 127, ch); \n            // });\n            ['\\u2302',\n                '\\u00C7', '\\u00FC', '\\u00E9', '\\u00E2', '\\u00E4', '\\u00E0', '\\u00E5', '\\u00E7',\n                '\\u00EA', '\\u00EB', '\\u00E8', '\\u00EF', '\\u00EE', '\\u00EC', '\\u00C4', '\\u00C5',\n                '\\u00C9', '\\u00E6', '\\u00C6', '\\u00F4', '\\u00F6', '\\u00F2', '\\u00FB', '\\u00F9',\n                '\\u00FF', '\\u00D6', '\\u00DC', '\\u00A2', '\\u00A3', '\\u00A5', '\\u20A7', '\\u0192',\n                '\\u00E1', '\\u00ED', '\\u00F3', '\\u00FA', '\\u00F1', '\\u00D1', '\\u00AA', '\\u00BA',\n                '\\u00BF', '\\u2310', '\\u00AC', '\\u00BD', '\\u00BC', '\\u00A1', '\\u00AB', '\\u00BB',\n                '\\u2591', '\\u2592', '\\u2593', '\\u2502', '\\u2524', '\\u2561', '\\u2562', '\\u2556',\n                '\\u2555', '\\u2563', '\\u2551', '\\u2557', '\\u255D', '\\u255C', '\\u255B', '\\u2510',\n                '\\u2514', '\\u2534', '\\u252C', '\\u251C', '\\u2500', '\\u253C', '\\u255E', '\\u255F',\n                '\\u255A', '\\u2554', '\\u2569', '\\u2566', '\\u2560', '\\u2550', '\\u256C', '\\u2567',\n                '\\u2568', '\\u2564', '\\u2565', '\\u2559', '\\u2558', '\\u2552', '\\u2553', '\\u256B',\n                '\\u256A', '\\u2518', '\\u250C', '\\u2588', '\\u2584', '\\u258C', '\\u2590', '\\u2580',\n                '\\u03B1', '\\u00DF', '\\u0393', '\\u03C0', '\\u03A3', '\\u03C3', '\\u00B5', '\\u03C4',\n                '\\u03A6', '\\u0398', '\\u03A9', '\\u03B4', '\\u221E', '\\u03C6', '\\u03B5', '\\u2229',\n                '\\u2261', '\\u00B1', '\\u2265', '\\u2264', '\\u2320', '\\u2321', '\\u00F7', '\\u2248',\n                '\\u00B0', '\\u2219', '\\u00B7', '\\u221A', '\\u207F', '\\u00B2', '\\u25A0', '\\u00A0'\n            ].forEach((ch, i) => {\n                this.draw(i + 127, ch);\n            });\n        }\n    }\n}\n","export var options = {\n    random: Math.random.bind(Math),\n    colorLookup: ((_) => null),\n};\nexport function configure(opts = {}) {\n    Object.assign(options, opts);\n}\n","import { options } from './config';\nfunction toColorInt(r = 0, g = 0, b = 0, base256 = false) {\n    if (base256) {\n        r = Math.max(0, Math.min(255, Math.round(r * 2.550001)));\n        g = Math.max(0, Math.min(255, Math.round(g * 2.550001)));\n        b = Math.max(0, Math.min(255, Math.round(b * 2.550001)));\n        return (r << 16) + (g << 8) + b;\n    }\n    r = Math.max(0, Math.min(15, Math.round(r / 100 * 15)));\n    g = Math.max(0, Math.min(15, Math.round(g / 100 * 15)));\n    b = Math.max(0, Math.min(15, Math.round(b / 100 * 15)));\n    return (r << 8) + (g << 4) + b;\n}\nexport class Color extends Int16Array {\n    static fromArray(vals, base256 = false) {\n        while (vals.length < 3)\n            vals.push(0);\n        if (base256) {\n            for (let i = 0; i < 7; ++i) {\n                vals[i] = Math.round((vals[i] || 0) * 100 / 255);\n            }\n        }\n        return new this(...vals);\n    }\n    static fromCss(css) {\n        if (!css.startsWith('#')) {\n            throw new Error('Color CSS strings must be of form \"#abc\" or \"#abcdef\" - received: [' + css + ']');\n        }\n        const c = Number.parseInt(css.substring(1), 16);\n        let r, g, b;\n        if (css.length == 4) {\n            r = Math.round((c >> 8) / 15 * 100);\n            g = Math.round(((c & 0xF0) >> 4) / 15 * 100);\n            b = Math.round((c & 0xF) / 15 * 100);\n        }\n        else {\n            r = Math.round((c >> 16) / 255 * 100);\n            g = Math.round(((c & 0xFF00) >> 8) / 255 * 100);\n            b = Math.round((c & 0xFF) / 255 * 100);\n        }\n        return new this(r, g, b);\n    }\n    static fromNumber(val, base256 = false) {\n        const c = new this();\n        for (let i = 0; i < c.length; ++i) {\n            c[i] = 0;\n        }\n        if (val < 0) {\n            c._r = -1;\n        }\n        else if (base256 || (val > 0xFFF)) {\n            c._r = Math.round(((val & 0xFF0000) >> 16) * 100 / 255);\n            c._g = Math.round(((val & 0xFF00) >> 8) * 100 / 255);\n            c._b = Math.round((val & 0xFF) * 100 / 255);\n        }\n        else {\n            c._r = Math.round(((val & 0xF00) >> 8) * 100 / 15);\n            c._g = Math.round(((val & 0xF0) >> 4) * 100 / 15);\n            c._b = Math.round((val & 0xF) * 100 / 15);\n        }\n        return c;\n    }\n    static make(arg, base256 = false) {\n        if ((arg === undefined) || (arg === null))\n            return new this(-1);\n        if (arg instanceof Color) {\n            return arg.clone();\n        }\n        if (typeof arg === 'string') {\n            const l = options.colorLookup(arg);\n            if (l)\n                return l.clone();\n            return this.fromCss(arg);\n        }\n        else if (Array.isArray(arg)) {\n            return this.fromArray(arg, base256);\n        }\n        else if (typeof arg === 'number') {\n            if (arg < 0)\n                return new this(-1);\n            return this.fromNumber(arg, base256);\n        }\n        throw new Error('Failed to make color - unknown argument: ' + JSON.stringify(arg));\n    }\n    static from(...args) {\n        const arg = args[0];\n        if (arg instanceof Color)\n            return arg;\n        if (arg < 0)\n            return new this(-1);\n        if (typeof arg === 'string') {\n            const l = options.colorLookup(arg);\n            if (l)\n                return l;\n        }\n        return this.make(arg, args[1]);\n    }\n    constructor(r = -1, g = 0, b = 0, rand = 0, redRand = 0, greenRand = 0, blueRand = 0) {\n        super(7);\n        this.set([r, g, b, rand, redRand, greenRand, blueRand]);\n    }\n    get r() { return Math.round(this[0] * 2.550001); }\n    get _r() { return this[0]; }\n    set _r(v) { this[0] = v; }\n    get g() { return Math.round(this[1] * 2.550001); }\n    get _g() { return this[1]; }\n    set _g(v) { this[1] = v; }\n    get b() { return Math.round(this[2] * 2.550001); }\n    get _b() { return this[2]; }\n    set _b(v) { this[2] = v; }\n    get _rand() { return this[3]; }\n    get _redRand() { return this[4]; }\n    get _greenRand() { return this[5]; }\n    get _blueRand() { return this[6]; }\n    // luminosity (0-100)\n    get l() {\n        return Math.round(0.5 * (Math.min(this._r, this._g, this._b) + Math.max(this._r, this._g, this._b)));\n    }\n    // saturation (0-100)\n    get s() {\n        if (this.l >= 100)\n            return 0;\n        return Math.round((Math.max(this._r, this._g, this._b) - Math.min(this._r, this._g, this._b)) * (100 - Math.abs(this.l * 2 - 100)) / 100);\n    }\n    // hue (0-360)\n    get h() {\n        let H = 0;\n        let R = this.r;\n        let G = this.g;\n        let B = this.b;\n        if (R >= G && G >= B) {\n            H = 60 * ((G - B) / (R - B));\n        }\n        else if (G > R && R >= B) {\n            H = 60 * (2 - (R - B) / (G - B));\n        }\n        else if (G >= B && B > R) {\n            H = 60 * (2 + (B - R) / (G - R));\n        }\n        else if (B > G && G > R) {\n            H = 60 * (4 - (G - R) / (B - R));\n        }\n        else if (B > R && R >= G) {\n            H = 60 * (4 + (R - G) / (B - G));\n        }\n        else {\n            H = 60 * (6 - (B - G) / (R - G));\n        }\n        return Math.round(H);\n    }\n    isNull() { return this._r < 0; }\n    equals(other) {\n        if (typeof other === 'string') {\n            return (other.length > 4) ? (this.toString(true) == other) : (this.toString() == other);\n        }\n        else if (typeof other === 'number') {\n            return (this.toInt() == other) || (this.toInt(true) == other);\n        }\n        const O = Color.from(other);\n        if (this.isNull())\n            return O.isNull();\n        return this.every((v, i) => {\n            return v == (O[i] || 0);\n        });\n    }\n    copy(other) {\n        if (Array.isArray(other)) {\n            this.set(other);\n        }\n        else {\n            const O = Color.from(other);\n            this.set(O);\n        }\n        return this;\n    }\n    _changed() {\n        return this;\n    }\n    clone() {\n        // @ts-ignore\n        const other = new this.constructor();\n        other.copy(this);\n        return other;\n    }\n    assign(_r = -1, _g = 0, _b = 0, _rand = 0, _redRand = 0, _greenRand = 0, _blueRand = 0) {\n        for (let i = 0; i < this.length; ++i) {\n            this[i] = (arguments[i] || 0);\n        }\n        return this;\n    }\n    assignRGB(_r = -1, _g = 0, _b = 0, _rand = 0, _redRand = 0, _greenRand = 0, _blueRand = 0) {\n        for (let i = 0; i < this.length; ++i) {\n            this[i] = Math.round((arguments[i] || 0) / 2.55);\n        }\n        return this;\n    }\n    nullify() {\n        this[0] = -1;\n        return this;\n    }\n    blackOut() {\n        for (let i = 0; i < this.length; ++i) {\n            this[i] = 0;\n        }\n        return this;\n    }\n    toInt(base256 = false) {\n        if (this.isNull())\n            return -1;\n        return toColorInt(this._r, this._g, this._b, base256);\n    }\n    clamp() {\n        if (this.isNull())\n            return this;\n        this._r = Math.min(100, Math.max(0, this._r));\n        this._g = Math.min(100, Math.max(0, this._g));\n        this._b = Math.min(100, Math.max(0, this._b));\n        return this._changed();\n    }\n    mix(other, percent) {\n        const O = Color.from(other);\n        if (O.isNull())\n            return this;\n        if (this.isNull()) {\n            this.blackOut();\n        }\n        percent = Math.min(100, Math.max(0, percent));\n        const keepPct = 100 - percent;\n        for (let i = 0; i < this.length; ++i) {\n            this[i] = Math.round(((this[i] * keepPct) + (O[i] * percent)) / 100);\n        }\n        return this._changed();\n    }\n    // Only adjusts r,g,b\n    lighten(percent) {\n        if (this.isNull())\n            return this;\n        percent = Math.min(100, Math.max(0, percent));\n        if (percent <= 0)\n            return;\n        const keepPct = 100 - percent;\n        for (let i = 0; i < 3; ++i) {\n            this[i] = Math.round(((this[i] * keepPct) + (100 * percent)) / 100);\n        }\n        return this._changed();\n    }\n    // Only adjusts r,g,b\n    darken(percent) {\n        if (this.isNull())\n            return this;\n        percent = Math.min(100, Math.max(0, percent));\n        if (percent <= 0)\n            return;\n        const keepPct = 100 - percent;\n        for (let i = 0; i < 3; ++i) {\n            this[i] = Math.round(((this[i] * keepPct) + (0 * percent)) / 100);\n        }\n        return this._changed();\n    }\n    bake() {\n        if (this.isNull())\n            return this;\n        const d = this;\n        if (d[3] + d[4] + d[5] + d[6]) {\n            const rand = this._rand ? Math.floor(options.random() * this._rand) : 0;\n            const redRand = this._redRand ? Math.floor(options.random() * this._redRand) : 0;\n            const greenRand = this._greenRand ? Math.floor(options.random() * this._greenRand) : 0;\n            const blueRand = this._blueRand ? Math.floor(options.random() * this._blueRand) : 0;\n            this._r += (rand + redRand);\n            this._g += (rand + greenRand);\n            this._b += (rand + blueRand);\n            for (let i = 3; i < this.length; ++i) {\n                this[i] = 0;\n            }\n            return this._changed();\n        }\n        return this;\n    }\n    // Adds a color to this one\n    add(other, percent = 100) {\n        const O = Color.from(other);\n        if (O.isNull())\n            return this;\n        if (this.isNull()) {\n            this.blackOut();\n        }\n        for (let i = 0; i < this.length; ++i) {\n            this[i] += Math.round(O[i] * percent / 100);\n        }\n        return this._changed();\n    }\n    scale(percent) {\n        if (this.isNull() || percent == 100)\n            return this;\n        percent = Math.max(0, percent);\n        for (let i = 0; i < this.length; ++i) {\n            this[i] = Math.round(this[i] * percent / 100);\n        }\n        return this._changed();\n    }\n    multiply(other) {\n        if (this.isNull())\n            return this;\n        let data = other;\n        if (!Array.isArray(other)) {\n            if (other.isNull())\n                return this;\n            data = other;\n        }\n        const len = Math.max(3, Math.min(this.length, data.length));\n        for (let i = 0; i < len; ++i) {\n            this[i] = Math.round(this[i] * (data[i] || 0) / 100);\n        }\n        return this._changed();\n    }\n    // scales rgb down to a max of 100\n    normalize() {\n        if (this.isNull())\n            return this;\n        const max = Math.max(this._r, this._g, this._b);\n        if (max <= 100)\n            return this;\n        this._r = Math.round(100 * this._r / max);\n        this._g = Math.round(100 * this._g / max);\n        this._b = Math.round(100 * this._b / max);\n        return this._changed();\n    }\n    css(base256 = false) {\n        const d = this;\n        let v = 0;\n        if (d[3] + d[4] + d[5] + d[6]) {\n            const rand = this._rand ? Math.floor(options.random() * this._rand) : 0;\n            const redRand = this._redRand ? Math.floor(options.random() * this._redRand) : 0;\n            const greenRand = this._greenRand ? Math.floor(options.random() * this._greenRand) : 0;\n            const blueRand = this._blueRand ? Math.floor(options.random() * this._blueRand) : 0;\n            const red = (this._r + rand + redRand);\n            const green = (this._g + rand + greenRand);\n            const blue = (this._b + rand + blueRand);\n            v = toColorInt(red, green, blue, base256);\n        }\n        else {\n            v = this.toInt(base256);\n        }\n        return '#' + v.toString(16).padStart(base256 ? 6 : 3, '0');\n    }\n    toString(base256 = false) {\n        if (this.isNull())\n            return 'null color';\n        return '#' + this.toInt(base256).toString(16).padStart(base256 ? 6 : 3, '0');\n    }\n    // adjusts the luminosity of 2 colors to ensure there is enough separation between them\n    static separate(a, b) {\n        if (a.isNull() || b.isNull())\n            return;\n        const A = a.clone().clamp();\n        const B = b.clone().clamp();\n        // console.log('separate');\n        // console.log('- a=%s, h=%d, s=%d, l=%d', A.toString(), A.h, A.s, A.l);\n        // console.log('- b=%s, h=%d, s=%d, l=%d', B.toString(), B.h, B.s, B.l);\n        let hDiff = Math.abs(A.h - B.h);\n        if (hDiff > 180) {\n            hDiff = 360 - hDiff;\n        }\n        if (hDiff > 45)\n            return; // colors are far enough apart in hue to be distinct\n        const dist = 40;\n        if (Math.abs(A.l - B.l) >= dist)\n            return;\n        // Get them sorted by saturation ( we will darken the more saturated color and lighten the other)\n        const [lo, hi] = [A, B].sort((a, b) => a.s - b.s);\n        // console.log('- lo=%s, hi=%s', lo.toString(), hi.toString());\n        while ((hi.l - lo.l) < dist) {\n            hi.mix(WHITE, 5);\n            lo.mix(BLACK, 5);\n        }\n        a.copy(A);\n        b.copy(B);\n        // console.log('=>', a.toString(), b.toString());\n    }\n}\nconst BLACK = new Color(0, 0, 0);\nconst WHITE = new Color(100, 100, 100);\n","import { Color } from './color';\n;\nexport class DataBuffer {\n    constructor(width, height) {\n        this._width = width;\n        this._height = height;\n        this._data = new Uint32Array(width * height);\n    }\n    get data() { return this._data; }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    get(x, y) {\n        let index = y * this.width + x;\n        const style = this._data[index] || 0;\n        const glyph = (style >> 24);\n        const bg = (style >> 12) & 0xFFF;\n        const fg = (style & 0xFFF);\n        return { glyph, fg, bg };\n    }\n    _toGlyph(ch) {\n        if (ch === null || ch === undefined)\n            return -1;\n        return ch.charCodeAt(0);\n    }\n    draw(x, y, glyph = -1, fg = -1, bg = -1) {\n        let index = y * this.width + x;\n        const current = this._data[index] || 0;\n        if (typeof glyph !== 'number') {\n            glyph = this._toGlyph(glyph);\n        }\n        if (typeof fg !== 'number') {\n            fg = Color.from(fg).toInt();\n        }\n        if (typeof bg !== 'number') {\n            bg = Color.from(bg).toInt();\n        }\n        glyph = (glyph >= 0) ? (glyph & 0xFF) : (current >> 24);\n        bg = (bg >= 0) ? (bg & 0xFFF) : ((current >> 12) & 0xFFF);\n        fg = (fg >= 0) ? (fg & 0xFFF) : (current & 0xFFF);\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data[index] = style;\n        return this;\n    }\n    // This is without opacity - opacity must be done in Mixer\n    drawSprite(x, y, sprite) {\n        const glyph = sprite.ch ? sprite.ch : sprite.glyph;\n        // const fg = sprite.fg ? sprite.fg.toInt() : -1;\n        // const bg = sprite.bg ? sprite.bg.toInt() : -1;\n        return this.draw(x, y, glyph, sprite.fg, sprite.bg);\n    }\n    blackOut(x, y) {\n        if (arguments.length == 0) {\n            return this.fill(0, 0, 0);\n        }\n        return this.draw(x, y, 0, 0, 0);\n    }\n    fill(glyph = 0, fg = 0xFFF, bg = 0) {\n        if (typeof glyph == 'string') {\n            glyph = this._toGlyph(glyph);\n        }\n        glyph = glyph & 0xFF;\n        fg = fg & 0xFFF;\n        bg = bg & 0xFFF;\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data.fill(style);\n        return this;\n    }\n    copy(other) {\n        this._data.set(other._data);\n        return this;\n    }\n}\nexport class Buffer extends DataBuffer {\n    constructor(canvas) {\n        super(canvas.width, canvas.height);\n        this._canvas = canvas;\n        canvas.copyTo(this);\n    }\n    get canvas() { return this._canvas; }\n    _toGlyph(ch) {\n        return this._canvas.glyphs.forChar(ch);\n    }\n    render() {\n        this._canvas.copy(this);\n        return this;\n    }\n    copyFromCanvas() {\n        this._canvas.copyTo(this);\n        return this;\n    }\n}\n","import { Color } from './color';\nexport class Mixer {\n    constructor() {\n        this.ch = -1;\n        this.fg = new Color();\n        this.bg = new Color();\n    }\n    _changed() {\n        return this;\n    }\n    copy(other) {\n        this.ch = other.ch;\n        this.fg.copy(other.fg);\n        this.bg.copy(other.bg);\n        return this._changed();\n    }\n    clone() {\n        const other = new Mixer();\n        other.copy(this);\n        return other;\n    }\n    nullify() {\n        this.ch = -1;\n        this.fg.nullify();\n        this.bg.nullify();\n        return this._changed();\n    }\n    blackOut() {\n        this.ch = 0;\n        this.fg.blackOut();\n        this.bg.blackOut();\n        return this._changed();\n    }\n    draw(ch = -1, fg = -1, bg = -1) {\n        if (ch && (ch !== -1)) {\n            this.ch = ch;\n        }\n        if ((fg !== -1) && (fg !== null)) {\n            fg = Color.from(fg);\n            this.fg.copy(fg);\n        }\n        if ((bg !== -1) && (bg !== null)) {\n            bg = Color.from(bg);\n            this.bg.copy(bg);\n        }\n        return this._changed();\n    }\n    drawSprite(info, opacity) {\n        if (opacity === undefined)\n            opacity = info.opacity;\n        if (opacity === undefined)\n            opacity = 100;\n        if (opacity <= 0)\n            return;\n        if (info.ch)\n            this.ch = info.ch;\n        else if (info.glyph !== undefined)\n            this.ch = info.glyph;\n        if (info.fg)\n            this.fg.mix(info.fg, opacity);\n        if (info.bg)\n            this.bg.mix(info.bg, opacity);\n        return this._changed();\n    }\n    invert() {\n        [this.bg, this.fg] = [this.fg, this.bg];\n        return this._changed();\n    }\n    multiply(color, fg = true, bg = true) {\n        color = Color.from(color);\n        if (fg) {\n            this.fg.multiply(color);\n        }\n        if (bg) {\n            this.bg.multiply(color);\n        }\n        return this._changed();\n    }\n    mix(color, fg = 50, bg = fg) {\n        color = Color.from(color);\n        if (fg > 0) {\n            this.fg.mix(color, fg);\n        }\n        if (bg > 0) {\n            this.bg.mix(color, bg);\n        }\n        return this._changed();\n    }\n    add(color, fg = 100, bg = fg) {\n        color = Color.from(color);\n        if (fg > 0) {\n            this.fg.add(color, fg);\n        }\n        if (bg > 0) {\n            this.bg.add(color, bg);\n        }\n        return this._changed();\n    }\n    separate() {\n        Color.separate(this.fg, this.bg);\n        return this._changed();\n    }\n    bake() {\n        this.fg.bake();\n        this.bg.bake();\n        this._changed();\n        return {\n            ch: this.ch,\n            fg: this.fg.toInt(),\n            bg: this.bg.toInt(),\n        };\n    }\n}\n","import { Canvas } from \"./canvas\";\nimport { Glyphs } from \"./glyphs\";\nimport { Buffer, DataBuffer } from './buffer';\nimport { Color } from './color';\nimport { Mixer } from './mixer';\nimport { configure } from './config';\nfunction withImage(image) {\n    let opts = {};\n    if (typeof image === 'string') {\n        opts.glyphs = Glyphs.fromImage(image);\n    }\n    else if (image instanceof HTMLImageElement) {\n        opts.glyphs = Glyphs.fromImage(image);\n    }\n    else {\n        if (!image.image)\n            throw new Error('You must supply the image.');\n        Object.assign(opts, image);\n        opts.glyphs = Glyphs.fromImage(image.image);\n    }\n    return new Canvas(opts);\n}\nfunction withFont(src) {\n    if (typeof src === 'string') {\n        src = { font: src };\n    }\n    src.glyphs = Glyphs.fromFont(src);\n    return new Canvas(src);\n}\nexport { Canvas, Glyphs, Buffer, DataBuffer, Color, Mixer, withImage, withFont, configure, };\n"],"names":["QUAD","VS","trim","FS","Canvas","[object Object]","options","this","_data","Uint32Array","_buffers","_attribs","_uniforms","_renderRequested","_autoRender","_width","_height","glyphs","Error","_gl","_initGL","node","_configure","canvas","width","height","tileWidth","_glyphs","tileHeight","pxWidth","clientWidth","pxHeight","clientHeight","gl","uniforms","needsUpdate","resize","uniform2uiv","_uploadGlyphs","render","viewport","uniform2ui","_createGeometry","_createData","x","y","glyph","fg","bg","index","style","_requestRender","buffer","data","forEach","i","n","dest","el","document","getElementById","HTMLCanvasElement","createElement","appendChild","getContext","p","sources","createProgram","VERTEX_SHADER","FRAGMENT_SHADER","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaders.VS","shaders.FS","useProgram","attributeCount","ACTIVE_ATTRIBUTES","enableVertexAttribArray","info","getActiveAttrib","name","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","uniform1i","_texture","t","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","position","deleteBuffer","uv","buffers","attribs","tileCount","positionData","Uint16Array","length","uvData","Uint8Array","value","createBuffer","bindBuffer","ARRAY_BUFFER","vertexAttribIPointer","UNSIGNED_SHORT","bufferData","STATIC_DRAW","UNSIGNED_BYTE","createGeometry","Object","assign","UNSIGNED_INT","requestAnimationFrame","DYNAMIC_DRAW","drawArrays","TRIANGLES","activeTexture","TEXTURE0","texImage2D","RGBA","Math","floor","Glyphs","opts","_tileWidth","_tileHeight","_map","font","_node","_ctx","src","startsWith","drawImage","basicOnly","basic","_initGlyphs","ch","fillStyle","fillRect","size","fontSize","max","textAlign","textBaseline","cx","cy","save","beginPath","rect","clip","undefined","fillText","restore","draw","String","fromCharCode","random","bind","colorLookup","_","toColorInt","r","g","b","base256","min","round","Color","Int16Array","vals","push","css","c","Number","parseInt","substring","val","_r","_g","_b","arg","clone","l","fromCss","Array","isArray","fromArray","fromNumber","JSON","stringify","args","make","rand","redRand","greenRand","blueRand","super","set","v","_rand","_redRand","_greenRand","_blueRand","s","abs","h","H","R","G","B","other","toString","toInt","O","from","isNull","every","constructor","copy","arguments","_changed","percent","blackOut","keepPct","d","len","padStart","a","A","clamp","hDiff","lo","hi","sort","mix","WHITE","BLACK","DataBuffer","charCodeAt","current","_toGlyph","sprite","fill","Mixer","nullify","opacity","color","multiply","add","separate","bake","_canvas","copyTo","forChar","image","fromImage","HTMLImageElement","fromFont"],"mappings":"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"}