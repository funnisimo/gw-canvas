{"version":3,"file":"gw-canvas.min.js","sources":["../js/utils.js","../js/shaders.js","../js/canvas.js","../js/glyphs.js","../js/config.js","../js/color.js","../js/mixer.js","../js/buffer.js","../js/index.js"],"sourcesContent":["// Copy of: https://github.com/ondras/fastiles/blob/master/ts/utils.ts (v2.1.0)\nexport const QUAD = [\n    0, 0, 1, 0, 0, 1,\n    0, 1, 1, 0, 1, 1\n];\nexport function createProgram(gl, ...sources) {\n    const p = gl.createProgram();\n    [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, index) => {\n        const shader = gl.createShader(type);\n        gl.shaderSource(shader, sources[index]);\n        gl.compileShader(shader);\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            throw new Error(gl.getShaderInfoLog(shader));\n        }\n        gl.attachShader(p, shader);\n    });\n    gl.linkProgram(p);\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(p));\n    }\n    return p;\n}\nexport function createTexture(gl) {\n    let t = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, t);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    return t;\n}\nexport function createGeometry(gl, attribs, width, height) {\n    let tileCount = width * height;\n    let positionData = new Uint16Array(tileCount * QUAD.length);\n    let uvData = new Uint8Array(tileCount * QUAD.length);\n    let i = 0;\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            QUAD.forEach(value => {\n                positionData[i] = (i % 2 ? y : x) + value;\n                uvData[i] = value;\n                i++;\n            });\n        }\n    }\n    const position = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, position);\n    gl.vertexAttribIPointer(attribs[\"position\"], 2, gl.UNSIGNED_SHORT, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\n    const uv = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, uv);\n    gl.vertexAttribIPointer(attribs[\"uv\"], 2, gl.UNSIGNED_BYTE, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, uvData, gl.STATIC_DRAW);\n    return { position, uv };\n}\n","// Based on: https://github.com/ondras/fastiles/blob/master/ts/shaders.ts (v2.1.0)\nexport const VS = `\n#version 300 es\nin uvec2 position;\nin uvec2 uv;\nin uint style;\nout vec2 fsUv;\nflat out uint fsStyle;\nuniform highp uvec2 tileSize;\nuniform uvec2 viewportSize;\nvoid main() {\n\tivec2 positionPx = ivec2(position * tileSize);\n\tvec2 positionNdc = (vec2(positionPx * 2) / vec2(viewportSize))-1.0;\n\tpositionNdc.y *= -1.0;\n\tgl_Position = vec4(positionNdc, 0.0, 1.0);\n\tfsUv = vec2(uv);\n\tfsStyle = style;\n}`.trim();\nexport const FS = `\n#version 300 es\nprecision highp float;\nin vec2 fsUv;\nflat in uint fsStyle;\nout vec4 fragColor;\nuniform sampler2D font;\nuniform highp uvec2 tileSize;\nvoid main() {\n\tuvec2 fontTiles = uvec2(textureSize(font, 0)) / tileSize;\n\n\tuint glyph = (fsStyle & uint(0xFF000000)) >> 24;\n\tuint glyphX = (glyph & uint(0xF));\n\tuint glyphY = (glyph >> 4);\n\tuvec2 fontPosition = uvec2(glyphX, glyphY);\n\n\tuvec2 fontPx = (tileSize * fontPosition) + uvec2(vec2(tileSize) * fsUv);\n\tvec3 texel = texelFetch(font, ivec2(fontPx), 0).rgb;\n\n\tfloat s = 15.0;\n\tuint fr = (fsStyle & uint(0xF00)) >> 8;\n\tuint fg = (fsStyle & uint(0x0F0)) >> 4;\n\tuint fb = (fsStyle & uint(0x00F)) >> 0;\n\tvec3 fgRgb = vec3(fr, fg, fb) / s;\n  \n\tuint br = (fsStyle & uint(0xF00000)) >> 20;\n\tuint bg = (fsStyle & uint(0x0F0000)) >> 16;\n\tuint bb = (fsStyle & uint(0x00F000)) >> 12;\n\tvec3 bgRgb = vec3(br, bg, bb) / s;\n  \n\tfragColor = vec4(mix(bgRgb, fgRgb, texel), 1.0);\n}`.trim();\n","// Based on: https://github.com/ondras/fastiles/blob/master/ts/scene.ts (v2.1.0)\nimport { createProgram, createTexture, createGeometry } from \"./utils\";\nimport * as shaders from \"./shaders\";\nconst VERTICES_PER_TILE = 6;\nexport class Canvas {\n    constructor(options) {\n        this._data = new Uint32Array();\n        this._buffers = {};\n        this._attribs = {};\n        this._uniforms = {};\n        this._renderRequested = false;\n        this._autoRender = true;\n        this._width = 50;\n        this._height = 25;\n        if (!options.glyphs)\n            throw new Error('You must supply glyphs for the canvas.');\n        this._gl = this._initGL(options.node);\n        this._configure(options);\n    }\n    get node() { return this._gl.canvas; }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    get tileWidth() { return this._glyphs.tileWidth; }\n    get tileHeight() { return this._glyphs.tileHeight; }\n    get pxWidth() { return this.node.width; }\n    get pxHeight() { return this.node.height; }\n    get glyphs() { return this._glyphs; }\n    set glyphs(glyphs) {\n        const gl = this._gl;\n        const uniforms = this._uniforms;\n        if (glyphs === this._glyphs && !glyphs.needsUpdate)\n            return;\n        if (glyphs !== this._glyphs) {\n            this._glyphs = glyphs;\n            this.resize(this._width, this._height);\n            gl.uniform2uiv(uniforms[\"tileSize\"], [this.tileWidth, this.tileHeight]);\n        }\n        this._uploadGlyphs();\n    }\n    _configure(options) {\n        this._width = options.width || this._width;\n        this._height = options.height || this._height;\n        this._autoRender = (options.render !== false);\n        this.glyphs = options.glyphs;\n    }\n    resize(width, height) {\n        this._width = width;\n        this._height = height;\n        const node = this.node;\n        node.width = this._width * this.tileWidth;\n        node.height = this._height * this.tileHeight;\n        const gl = this._gl;\n        const uniforms = this._uniforms;\n        gl.viewport(0, 0, node.width, node.height);\n        gl.uniform2ui(uniforms[\"viewportSize\"], node.width, node.height);\n        this._createGeometry();\n        this._createData();\n    }\n    draw(x, y, glyph, fg, bg) {\n        let index = y * this._width + x;\n        index *= VERTICES_PER_TILE;\n        glyph = glyph & 0xFF;\n        bg = bg & 0xFFF;\n        fg = fg & 0xFFF;\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data[index + 2] = style;\n        this._data[index + 5] = style;\n        this._requestRender();\n    }\n    copy(buffer) {\n        buffer.data.forEach((style, i) => {\n            const index = i * VERTICES_PER_TILE;\n            this._data[index + 2] = style;\n            this._data[index + 5] = style;\n        });\n        this._requestRender();\n    }\n    copyTo(buffer) {\n        const n = this.width * this.height;\n        const dest = buffer.data;\n        for (let i = 0; i < n; ++i) {\n            const index = i * VERTICES_PER_TILE;\n            dest[i] = this._data[index + 2];\n        }\n    }\n    _initGL(node) {\n        if (typeof node === 'string') {\n            const el = document.getElementById(node);\n            if (!el)\n                throw new Error('Failed to find canvas with id:' + node);\n            if (!(el instanceof HTMLCanvasElement))\n                throw new Error('Canvas: node must be a canvas element.');\n            node = el;\n        }\n        else if (!node) {\n            node = document.createElement(\"canvas\");\n        }\n        let gl = node.getContext(\"webgl2\");\n        if (!gl) {\n            throw new Error(\"WebGL 2 not supported\");\n        }\n        const p = createProgram(gl, shaders.VS, shaders.FS);\n        gl.useProgram(p);\n        const attributeCount = gl.getProgramParameter(p, gl.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < attributeCount; i++) {\n            gl.enableVertexAttribArray(i);\n            let info = gl.getActiveAttrib(p, i);\n            this._attribs[info.name] = i;\n        }\n        const uniformCount = gl.getProgramParameter(p, gl.ACTIVE_UNIFORMS);\n        for (let i = 0; i < uniformCount; i++) {\n            let info = gl.getActiveUniform(p, i);\n            this._uniforms[info.name] = gl.getUniformLocation(p, info.name);\n        }\n        gl.uniform1i(this._uniforms[\"font\"], 0);\n        this._texture = createTexture(gl);\n        return gl;\n    }\n    _createGeometry() {\n        const gl = this._gl;\n        this._buffers.position && gl.deleteBuffer(this._buffers.position);\n        this._buffers.uv && gl.deleteBuffer(this._buffers.uv);\n        let buffers = createGeometry(gl, this._attribs, this._width, this._height);\n        Object.assign(this._buffers, buffers);\n    }\n    _createData() {\n        const gl = this._gl;\n        const attribs = this._attribs;\n        const tileCount = this._width * this._height;\n        this._buffers.style && gl.deleteBuffer(this._buffers.style);\n        this._data = new Uint32Array(tileCount * VERTICES_PER_TILE);\n        const style = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, style);\n        gl.vertexAttribIPointer(attribs[\"style\"], 1, gl.UNSIGNED_INT, 0, 0);\n        Object.assign(this._buffers, { style });\n    }\n    _requestRender() {\n        if (this._renderRequested || !this._autoRender) {\n            return;\n        }\n        this._renderRequested = true;\n        requestAnimationFrame(() => this.render());\n    }\n    render() {\n        const gl = this._gl;\n        if (this._glyphs.needsUpdate) { // auto keep glyphs up to date\n            this._uploadGlyphs();\n        }\n        this._renderRequested = false;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._buffers.style);\n        gl.bufferData(gl.ARRAY_BUFFER, this._data, gl.DYNAMIC_DRAW);\n        gl.drawArrays(gl.TRIANGLES, 0, this._width * this._height * VERTICES_PER_TILE);\n    }\n    _uploadGlyphs() {\n        if (!this._glyphs.needsUpdate)\n            return;\n        const gl = this._gl;\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this._texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this._glyphs.node);\n        this._requestRender();\n        this._glyphs.needsUpdate = false;\n    }\n}\n","export class Glyphs {\n    constructor(opts = {}) {\n        this._tileWidth = 12;\n        this._tileHeight = 16;\n        this.needsUpdate = true;\n        this._map = {};\n        opts.font = opts.font || 'monospace';\n        this._node = document.createElement('canvas');\n        this._ctx = this.node.getContext('2d');\n        this._configure(opts);\n    }\n    static fromImage(src) {\n        if (typeof src === 'string') {\n            if (src.startsWith('data:'))\n                throw new Error('Glyph: You must load a data string into an image element and use that.');\n            const el = document.getElementById(src);\n            if (!el)\n                throw new Error('Glyph: Failed to find image element with id:' + src);\n            src = el;\n        }\n        const glyph = new this({ tileWidth: src.width / 16, tileHeight: src.height / 16 });\n        glyph._ctx.drawImage(src, 0, 0);\n        return glyph;\n    }\n    static fromFont(src) {\n        if (typeof src === 'string') {\n            src = { font: src };\n        }\n        const glyphs = new this(src);\n        const basicOnly = src.basicOnly || src.basic || false;\n        glyphs._initGlyphs(basicOnly);\n        return glyphs;\n    }\n    get node() { return this._node; }\n    get tileWidth() { return this._tileWidth; }\n    get tileHeight() { return this._tileHeight; }\n    get pxWidth() { return this._node.width; }\n    get pxHeight() { return this._node.height; }\n    forChar(ch) { return this._map[ch] || (ch.charCodeAt(0) % 256); }\n    _configure(opts) {\n        this._tileWidth = opts.tileWidth || this.tileWidth;\n        this._tileHeight = opts.tileHeight || this.tileHeight;\n        this.node.width = 16 * this.tileWidth;\n        this.node.height = 16 * this.tileHeight;\n        this._ctx.fillStyle = 'black';\n        this._ctx.fillRect(0, 0, this.pxWidth, this.pxHeight);\n        const size = opts.fontSize || opts.size || Math.max(this.tileWidth, this.tileHeight);\n        this._ctx.font = '' + size + 'px ' + opts.font;\n        this._ctx.textAlign = 'center';\n        this._ctx.textBaseline = 'middle';\n        this._ctx.fillStyle = 'white';\n    }\n    draw(n, ch) {\n        const x = (n % 16) * this.tileWidth;\n        const y = Math.floor(n / 16) * this.tileHeight;\n        const cx = x + Math.floor(this.tileWidth / 2);\n        const cy = y + Math.floor(this.tileHeight / 2);\n        this._ctx.save();\n        this._ctx.beginPath();\n        this._ctx.rect(x, y, this.tileWidth, this.tileHeight);\n        this._ctx.clip();\n        if (typeof ch === 'function') {\n            ch(this._ctx, x, y, this.tileWidth, this.tileHeight);\n        }\n        else {\n            this._map[ch] = n;\n            this._ctx.fillText(ch, cx, cy);\n        }\n        this._ctx.restore();\n        this.needsUpdate = true;\n    }\n    _initGlyphs(basicOnly = false) {\n        for (let i = 32; i < 127; ++i) {\n            this.draw(i, String.fromCharCode(i));\n        }\n        if (!basicOnly) {\n            [' ', '\\u263a', '\\u263b', '\\u2665', '\\u2666', '\\u2663', '\\u2660', '\\u263c',\n                '\\u2600', '\\u2605', '\\u2606', '\\u2642', '\\u2640', '\\u266a', '\\u266b', '\\u2638',\n                '\\u25b6', '\\u25c0', '\\u2195', '\\u203c', '\\u204b', '\\u262f', '\\u2318', '\\u2616',\n                '\\u2191', '\\u2193', '\\u2192', '\\u2190', '\\u2126', '\\u2194', '\\u25b2', '\\u25bc',\n            ].forEach((ch, i) => {\n                this.draw(i, ch);\n            });\n            [\n                '\\u2302',\n                '\\u2b09', '\\u272a', '\\u2718', '\\u2610', '\\u2611', '\\u25ef', '\\u25ce', '\\u2690',\n                '\\u2691', '\\u2598', '\\u2596', '\\u259d', '\\u2597', '\\u2744', '\\u272d', '\\u2727',\n                '\\u25e3', '\\u25e4', '\\u25e2', '\\u25e5', '\\u25a8', '\\u25a7', '\\u259a', '\\u265f',\n                '\\u265c', '\\u265e', '\\u265d', '\\u265b', '\\u265a', '\\u301c', '\\u2694', '\\u2692',\n                '\\u25b6', '\\u25bc', '\\u25c0', '\\u25b2', '\\u25a4', '\\u25a5', '\\u25a6', '\\u257a',\n                '\\u257b', '\\u2578', '\\u2579', '\\u2581', '\\u2594', '\\u258f', '\\u2595', '\\u272d',\n                '\\u2591', '\\u2592', '\\u2593', '\\u2503', '\\u252b', '\\u2561', '\\u2562', '\\u2556',\n                '\\u2555', '\\u2563', '\\u2551', '\\u2557', '\\u255d', '\\u255c', '\\u255b', '\\u2513',\n                '\\u2517', '\\u253b', '\\u2533', '\\u2523', '\\u2501', '\\u254b', '\\u255e', '\\u255f',\n                '\\u255a', '\\u2554', '\\u2569', '\\u2566', '\\u2560', '\\u2550', '\\u256c', '\\u2567',\n                '\\u2568', '\\u2564', '\\u2565', '\\u2559', '\\u2558', '\\u2552', '\\u2553', '\\u256b',\n                '\\u256a', '\\u251b', '\\u250f', '\\u2588', '\\u2585', '\\u258c', '\\u2590', '\\u2580',\n                '\\u03b1', '\\u03b2', '\\u0393', '\\u03c0', '\\u03a3', '\\u03c3', '\\u03bc', '\\u03c4',\n                '\\u03a6', '\\u03b8', '\\u03a9', '\\u03b4', '\\u221e', '\\u03b8', '\\u03b5', '\\u03b7',\n                '\\u039e', '\\u00b1', '\\u2265', '\\u2264', '\\u2234', '\\u2237', '\\u00f7', '\\u2248',\n                '\\u22c4', '\\u22c5', '\\u2217', '\\u27b5', '\\u2620', '\\u2625', '\\u25fc', '\\u25fb'\n            ].forEach((ch, i) => {\n                this.draw(i + 127, ch);\n            });\n        }\n    }\n}\n","export var options = {\n    random: Math.random.bind(Math),\n};\nexport function configure(opts = {}) {\n    Object.assign(options, opts);\n}\n","import { options } from './config';\nexport class Color {\n    constructor(r = -1, g = 0, b = 0, rand = 0, redRand = 0, greenRand = 0, blueRand = 0) {\n        this._data = [r, g, b, rand, redRand, greenRand, blueRand];\n    }\n    static fromArray(vals, base256 = false) {\n        if (vals.length < 3)\n            throw new Error('Colors must have 3 values.');\n        if (base256) {\n            vals = vals.map((v) => Math.round(v * 100 / 255));\n        }\n        return new this(...vals);\n    }\n    static fromString(css) {\n        if (!css.startsWith('#'))\n            throw new Error('Color strings must be of form \"#abc\" or \"#abcdef\"');\n        const c = Number.parseInt(css.substring(1), 16);\n        let r, g, b;\n        if (css.length == 4) {\n            r = Math.round((c >> 8) / 15 * 100);\n            g = Math.round(((c & 0xF0) >> 4) / 15 * 100);\n            b = Math.round((c & 0xF) / 15 * 100);\n        }\n        else {\n            r = Math.round((c >> 16) / 255 * 100);\n            g = Math.round(((c & 0xFF00) >> 8) / 255 * 100);\n            b = Math.round((c & 0xFF) / 255 * 100);\n        }\n        return new this(r, g, b);\n    }\n    static fromNumber(val, base256 = false) {\n        const c = new this();\n        c.fromInt(val, base256);\n        return c;\n    }\n    static make(arg, base256 = false) {\n        if (arg instanceof this) {\n            return arg.clone();\n        }\n        if (typeof arg === 'string') {\n            return this.fromString(arg);\n        }\n        else if (Array.isArray(arg)) {\n            return this.fromArray(arg, base256);\n        }\n        else if (typeof arg === 'number') {\n            return this.fromNumber(arg, base256);\n        }\n        throw new Error('Failed to make color - unknown argument: ' + JSON.stringify(arg));\n    }\n    static from(arg, base256 = false) {\n        if (arg instanceof this)\n            return arg;\n        if (arg < 0)\n            return new this();\n        return this.make(arg, base256);\n    }\n    get r() { return Math.round(this._data[0] * 2.550001); }\n    get _r() { return this._data[0]; }\n    set _r(v) { this._data[0] = v; }\n    get g() { return Math.round(this._data[1] * 2.550001); }\n    get _g() { return this._data[1]; }\n    set _g(v) { this._data[1] = v; }\n    get b() { return Math.round(this._data[2] * 2.550001); }\n    get _b() { return this._data[2]; }\n    set _b(v) { this._data[2] = v; }\n    get _rand() { return this._data[3]; }\n    get _redRand() { return this._data[4]; }\n    get _greenRand() { return this._data[5]; }\n    get _blueRand() { return this._data[6]; }\n    // luminosity (0-100)\n    get l() {\n        return Math.round(0.5 * (Math.min(this._r, this._g, this._b) + Math.max(this._r, this._g, this._b)));\n    }\n    // saturation (0-100)\n    get s() {\n        if (this.l >= 100)\n            return 0;\n        return Math.round((Math.max(this._r, this._g, this._b) - Math.min(this._r, this._g, this._b)) * (100 - Math.abs(this.l * 2 - 100)) / 100);\n    }\n    // hue (0-360)\n    get h() {\n        let H = 0;\n        let R = this.r;\n        let G = this.g;\n        let B = this.b;\n        if (R >= G && G >= B) {\n            H = 60 * ((G - B) / (R - B));\n        }\n        else if (G > R && R >= B) {\n            H = 60 * (2 - (R - B) / (G - B));\n        }\n        else if (G >= B && B > R) {\n            H = 60 * (2 + (B - R) / (G - R));\n        }\n        else if (B > G && G > R) {\n            H = 60 * (4 - (G - R) / (B - R));\n        }\n        else if (B > R && R >= G) {\n            H = 60 * (4 + (R - G) / (B - G));\n        }\n        else {\n            H = 60 * (6 - (B - G) / (R - G));\n        }\n        return Math.round(H);\n    }\n    isNull() { return this._r < 0; }\n    equals(other) {\n        other = Color.from(other);\n        const data = other._data;\n        return this._data.every((v, i) => {\n            return v == (data[i] || 0);\n        });\n    }\n    copy(other) {\n        other = Color.from(other);\n        return this.set(...other._data);\n    }\n    clone() {\n        const other = new Color(); // Object.create(this.__proto__);\n        other.copy(this);\n        return other;\n    }\n    set(_r = 0, _g = 0, _b = 0, _rand = 0, _redRand = 0, _greenRand = 0, _blueRand = 0) {\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = arguments[i] || 0;\n        }\n        return this;\n    }\n    setRGB(_r = 0, _g = 0, _b = 0, _rand = 0, _redRand = 0, _greenRand = 0, _blueRand = 0) {\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = Math.round((arguments[i] || 0) / 2.55);\n        }\n        return this;\n    }\n    nullify() {\n        return this.set(-1, 0, 0);\n    }\n    blackOut() {\n        return this.set(0, 0, 0);\n    }\n    toInt(base256 = false) {\n        if (this.isNull())\n            return -1;\n        if (base256) {\n            const r = Math.max(0, Math.min(255, this.r));\n            const g = Math.max(0, Math.min(255, this.g));\n            const b = Math.max(0, Math.min(255, this.b));\n            return (r << 16) + (g << 8) + b;\n        }\n        const r = Math.max(0, Math.min(15, Math.round(this._r / 100 * 15)));\n        const g = Math.max(0, Math.min(15, Math.round(this._g / 100 * 15)));\n        const b = Math.max(0, Math.min(15, Math.round(this._b / 100 * 15)));\n        return (r << 8) + (g << 4) + b;\n    }\n    fromInt(val, base256 = false) {\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = 0;\n        }\n        if (val < 0) {\n            this._r = -1;\n        }\n        else if (base256) {\n            this._r = Math.round((val >> 16) * 100 / 255);\n            this._g = Math.round(((val & 0xFF00) >> 8) * 100 / 255);\n            this._b = Math.round((val & 0xFF) * 100 / 255);\n            return this;\n        }\n        else {\n            this._r = Math.round((val >> 8) * 100 / 15);\n            this._g = Math.round(((val & 0xF0) >> 4) * 100 / 15);\n            this._b = Math.round((val & 0xF) * 100 / 15);\n        }\n        return this;\n    }\n    clamp() {\n        if (this.isNull())\n            return this;\n        this._r = Math.min(100, Math.max(0, this._r));\n        this._g = Math.min(100, Math.max(0, this._g));\n        this._b = Math.min(100, Math.max(0, this._b));\n        return this;\n    }\n    mix(other, percent) {\n        other = Color.from(other);\n        if (other.isNull())\n            return this;\n        if (this.isNull()) {\n            this.blackOut();\n        }\n        const data = other._data;\n        percent = Math.min(100, Math.max(0, percent));\n        const keepPct = 100 - percent;\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = Math.round(((this._data[i] * keepPct) + (data[i] * percent)) / 100);\n        }\n        return this;\n    }\n    // Only adjusts r,g,b\n    lighten(percent) {\n        if (this.isNull())\n            return this;\n        percent = Math.min(100, Math.max(0, percent));\n        if (percent <= 0)\n            return;\n        const keepPct = 100 - percent;\n        for (let i = 0; i < 3; ++i) {\n            this._data[i] = Math.round(((this._data[i] * keepPct) + (100 * percent)) / 100);\n        }\n        return this;\n    }\n    // Only adjusts r,g,b\n    darken(percent) {\n        if (this.isNull())\n            return this;\n        percent = Math.min(100, Math.max(0, percent));\n        if (percent <= 0)\n            return;\n        const keepPct = 100 - percent;\n        for (let i = 0; i < 3; ++i) {\n            this._data[i] = Math.round(((this._data[i] * keepPct) + (0 * percent)) / 100);\n        }\n        return this;\n    }\n    bake() {\n        if (this.isNull())\n            return this;\n        const rand = this._rand ? Math.floor(options.random() * this._rand) : 0;\n        const redRand = this._redRand ? Math.floor(options.random() * this._redRand) : 0;\n        const greenRand = this._greenRand ? Math.floor(options.random() * this._greenRand) : 0;\n        const blueRand = this._blueRand ? Math.floor(options.random() * this._blueRand) : 0;\n        this._r += (rand + redRand);\n        this._g += (rand + greenRand);\n        this._b += (rand + blueRand);\n        for (let i = 3; i < this._data.length; ++i) {\n            this._data[i] = 0;\n        }\n        return this;\n    }\n    // Adds a color to this one\n    add(other, percent = 100) {\n        other = Color.from(other);\n        if (other.isNull())\n            return this;\n        if (this.isNull()) {\n            this.blackOut();\n        }\n        const data = other._data;\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] += Math.round(data[i] * percent / 100);\n        }\n        return this;\n    }\n    scale(percent) {\n        if (this.isNull())\n            return this;\n        percent = Math.max(0, percent);\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = Math.round(this._data[i] * percent / 100);\n        }\n        return this;\n    }\n    multiply(other) {\n        other = Color.from(other);\n        if (other.isNull())\n            return this;\n        if (this.isNull())\n            return this;\n        const data = other._data;\n        for (let i = 0; i < this._data.length; ++i) {\n            this._data[i] = Math.round(this._data[i] * data[i] / 100);\n        }\n        return this;\n    }\n    // scales rgb down to a max of 100\n    normalize() {\n        if (this.isNull())\n            return this;\n        const max = Math.max(this._r, this._g, this._b);\n        if (max <= 100)\n            return this;\n        this._r = Math.round(100 * this._r / max);\n        this._g = Math.round(100 * this._g / max);\n        this._b = Math.round(100 * this._b / max);\n        return this;\n    }\n    toString(base256 = false) {\n        if (this.isNull())\n            return 'null color';\n        return '#' + this.toInt(base256).toString(16).padStart(base256 ? 6 : 3, '0');\n    }\n    // adjusts the luminosity of 2 colors to ensure there is enough separation between them\n    static separate(a, b) {\n        if (a.isNull() || b.isNull())\n            return;\n        const A = a.clone().clamp();\n        const B = b.clone().clamp();\n        // console.log('separate');\n        // console.log('- a=%s, h=%d, s=%d, l=%d', A.toString(), A.h, A.s, A.l);\n        // console.log('- b=%s, h=%d, s=%d, l=%d', B.toString(), B.h, B.s, B.l);\n        let hDiff = Math.abs(A.h - B.h);\n        if (hDiff > 180) {\n            hDiff = 360 - hDiff;\n        }\n        if (hDiff > 45)\n            return; // colors are far enough apart in hue to be distinct\n        const dist = 40;\n        if (Math.abs(A.l - B.l) >= dist)\n            return;\n        // Get them sorted by saturation ( we will darken the more saturated color and lighten the other)\n        const [lo, hi] = [A, B].sort((a, b) => a.s - b.s);\n        // console.log('- lo=%s, hi=%s', lo.toString(), hi.toString());\n        while ((hi.l - lo.l) < dist) {\n            hi.mix(WHITE, 5);\n            lo.mix(BLACK, 5);\n        }\n        a.copy(A);\n        b.copy(B);\n        // console.log('=>', a.toString(), b.toString());\n    }\n}\nconst BLACK = new Color(0, 0, 0);\nconst WHITE = new Color(100, 100, 100);\n","import { Color } from './color';\nexport class Mixer {\n    constructor() {\n        this.ch = -1;\n        this.fg = new Color();\n        this.bg = new Color();\n    }\n    copy(other) {\n        this.ch = other.ch;\n        this.fg.copy(other.fg);\n        this.bg.copy(other.bg);\n        return this;\n    }\n    clone() {\n        const other = new Mixer();\n        other.copy(this);\n        return other;\n    }\n    nullify() {\n        this.ch = -1;\n        this.fg.nullify();\n        this.bg.nullify();\n        return this;\n    }\n    blackOut() {\n        this.ch = 0;\n        this.fg.blackOut();\n        this.bg.blackOut();\n        return this;\n    }\n    draw(ch = -1, fg = -1, bg = -1) {\n        if (ch !== -1) {\n            this.ch = ch;\n        }\n        if (fg != -1) {\n            fg = Color.from(fg);\n            this.fg.copy(fg);\n        }\n        if (bg != -1) {\n            bg = Color.from(bg);\n            this.bg.copy(bg);\n        }\n        return this;\n    }\n    drawSprite(info, opacity = 100) {\n        if (opacity <= 0)\n            return;\n        if (info.ch)\n            this.ch = info.ch;\n        else if (info.glyph !== undefined)\n            this.ch = info.glyph;\n        if (info.fg)\n            this.fg.mix(info.fg, opacity);\n        if (info.bg)\n            this.bg.mix(info.bg, opacity);\n        return this;\n    }\n    invert() {\n        [this.bg, this.fg] = [this.fg, this.bg];\n        return this;\n    }\n    multiply(color, fg = true, bg = true) {\n        color = Color.from(color);\n        if (fg) {\n            this.fg.multiply(color);\n        }\n        if (bg) {\n            this.bg.multiply(color);\n        }\n        return this;\n    }\n    mix(color, fg = 50, bg = fg) {\n        color = Color.from(color);\n        if (fg > 0) {\n            this.fg.mix(color, fg);\n        }\n        if (bg > 0) {\n            this.bg.mix(color, bg);\n        }\n        return this;\n    }\n    add(color, fg = 100, bg = fg) {\n        color = Color.from(color);\n        if (fg > 0) {\n            this.fg.add(color, fg);\n        }\n        if (bg > 0) {\n            this.bg.add(color, bg);\n        }\n        return this;\n    }\n    separate() {\n        Color.separate(this.fg, this.bg);\n        return this;\n    }\n    bake() {\n        this.fg.bake();\n        this.bg.bake();\n        return {\n            ch: this.ch,\n            fg: this.fg.toInt(),\n            bg: this.bg.toInt(),\n        };\n    }\n}\n","import { Color } from './color';\n;\nexport class Buffer {\n    constructor(canvas) {\n        this._canvas = canvas;\n        this._data = new Uint32Array(canvas.width * canvas.height);\n        canvas.copyTo(this);\n    }\n    get data() { return this._data; }\n    get width() { return this._canvas.width; }\n    get height() { return this._canvas.height; }\n    get(x, y) {\n        let index = y * this.width + x;\n        const style = this._data[index] || 0;\n        const glyph = (style >> 24);\n        const bg = (style >> 12) & 0xFFF;\n        const fg = (style & 0xFFF);\n        return { glyph, fg, bg };\n    }\n    draw(x, y, glyph = -1, fg = -1, bg = -1) {\n        let index = y * this.width + x;\n        const current = this._data[index] || 0;\n        if (typeof glyph == 'string') {\n            glyph = this._canvas.glyphs.forChar(glyph);\n        }\n        if (fg instanceof Color) {\n            fg = fg.toInt();\n        }\n        if (bg instanceof Color) {\n            bg = bg.toInt();\n        }\n        glyph = (glyph >= 0) ? (glyph & 0xFF) : (current >> 24);\n        bg = (bg >= 0) ? (bg & 0xFFF) : ((current >> 12) & 0xFFF);\n        fg = (fg >= 0) ? (fg & 0xFFF) : (current & 0xFFF);\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data[index] = style;\n        return this;\n    }\n    // This is without opacity - opacity is more work...\n    drawSprite(x, y, sprite) {\n        const glyph = sprite.ch ? sprite.ch : sprite.glyph;\n        // const fg = sprite.fg ? sprite.fg.toInt() : -1;\n        // const bg = sprite.bg ? sprite.bg.toInt() : -1;\n        return this.draw(x, y, glyph, sprite.fg, sprite.bg);\n    }\n    blackOut(x, y) {\n        return this.draw(x, y, 0, 0, 0);\n    }\n    fill(glyph = 0, fg = 0xFFF, bg = 0) {\n        if (typeof glyph == 'string') {\n            glyph = this._canvas.glyphs.forChar(glyph);\n        }\n        glyph = glyph & 0xFF;\n        fg = fg & 0xFFF;\n        bg = bg & 0xFFF;\n        const style = (glyph << 24) + (bg << 12) + fg;\n        this._data.fill(style);\n        return this;\n    }\n    copy(other) {\n        this._data.set(other._data);\n        return this;\n    }\n    render() {\n        this._canvas.copy(this);\n        return this;\n    }\n    copyFromCanvas() {\n        this._canvas.copyTo(this);\n        return this;\n    }\n}\n","import { Canvas } from \"./canvas\";\nimport { Glyphs } from \"./glyphs\";\nimport { Buffer } from './buffer';\nimport { Color } from './color';\nimport { Mixer } from './mixer';\nimport { configure } from './config';\nfunction withImage(image) {\n    let opts = {};\n    if (typeof image === 'string') {\n        opts.glyphs = Glyphs.fromImage(image);\n    }\n    else if (image instanceof HTMLImageElement) {\n        opts.glyphs = Glyphs.fromImage(image);\n    }\n    else {\n        if (!image.image)\n            throw new Error('You must supply the image.');\n        Object.assign(opts, image);\n        opts.glyphs = Glyphs.fromImage(image.image);\n    }\n    return new Canvas(opts);\n}\nfunction withFont(src) {\n    if (typeof src === 'string') {\n        src = { font: src };\n    }\n    src.glyphs = Glyphs.fromFont(src);\n    return new Canvas(src);\n}\nexport { Canvas, Glyphs, Buffer, Color, Mixer, withImage, withFont, configure, };\n"],"names":["QUAD","VS","trim","FS","Canvas","[object Object]","options","this","_data","Uint32Array","_buffers","_attribs","_uniforms","_renderRequested","_autoRender","_width","_height","glyphs","Error","_gl","_initGL","node","_configure","canvas","width","height","tileWidth","_glyphs","tileHeight","pxWidth","pxHeight","gl","uniforms","needsUpdate","resize","uniform2uiv","_uploadGlyphs","render","viewport","uniform2ui","_createGeometry","_createData","x","y","glyph","fg","bg","index","style","_requestRender","buffer","data","forEach","i","n","dest","el","document","getElementById","HTMLCanvasElement","createElement","getContext","p","sources","createProgram","VERTEX_SHADER","FRAGMENT_SHADER","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaders.VS","shaders.FS","useProgram","attributeCount","ACTIVE_ATTRIBUTES","enableVertexAttribArray","info","getActiveAttrib","name","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","uniform1i","_texture","t","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","position","deleteBuffer","uv","buffers","attribs","tileCount","positionData","Uint16Array","length","uvData","Uint8Array","value","createBuffer","bindBuffer","ARRAY_BUFFER","vertexAttribIPointer","UNSIGNED_SHORT","bufferData","STATIC_DRAW","UNSIGNED_BYTE","createGeometry","Object","assign","UNSIGNED_INT","requestAnimationFrame","DYNAMIC_DRAW","drawArrays","TRIANGLES","activeTexture","TEXTURE0","texImage2D","RGBA","Glyphs","opts","_tileWidth","_tileHeight","_map","font","_node","_ctx","src","startsWith","drawImage","basicOnly","basic","_initGlyphs","ch","charCodeAt","fillStyle","fillRect","size","fontSize","Math","max","textAlign","textBaseline","floor","cx","cy","save","beginPath","rect","clip","fillText","restore","draw","String","fromCharCode","random","bind","Color","r","g","b","rand","redRand","greenRand","blueRand","vals","base256","map","v","round","css","c","Number","parseInt","substring","val","fromInt","arg","clone","fromString","Array","isArray","fromArray","fromNumber","JSON","stringify","make","_r","_g","_b","_rand","_redRand","_greenRand","_blueRand","l","min","s","abs","h","H","R","G","B","other","from","every","set","copy","arguments","isNull","percent","blackOut","keepPct","toInt","toString","padStart","a","A","clamp","hDiff","lo","hi","sort","mix","WHITE","BLACK","Mixer","nullify","opacity","undefined","color","multiply","add","separate","bake","_canvas","copyTo","current","forChar","sprite","fill","image","fromImage","HTMLImageElement","fromFont"],"mappings":"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"}