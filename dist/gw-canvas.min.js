!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).GW=t.GW||{})}(this,(function(t){"use strict";const i=[0,0,1,0,0,1,0,1,1,0,1,1];const e="\n#version 300 es\nin uvec2 position;\nin uvec2 uv;\nin uint style;\nout vec2 fsUv;\nflat out uint fsStyle;\nuniform highp uvec2 tileSize;\nuniform uvec2 viewportSize;\nvoid main() {\n\tivec2 positionPx = ivec2(position * tileSize);\n\tvec2 positionNdc = (vec2(positionPx * 2) / vec2(viewportSize))-1.0;\n\tpositionNdc.y *= -1.0;\n\tgl_Position = vec4(positionNdc, 0.0, 1.0);\n\tfsUv = vec2(uv);\n\tfsStyle = style;\n}".trim(),s="\n#version 300 es\nprecision highp float;\nin vec2 fsUv;\nflat in uint fsStyle;\nout vec4 fragColor;\nuniform sampler2D font;\nuniform highp uvec2 tileSize;\nvoid main() {\n\tuvec2 fontTiles = uvec2(textureSize(font, 0)) / tileSize;\n\n\tuint glyph = (fsStyle & uint(0xFF000000)) >> 24;\n\tuint glyphX = (glyph & uint(0xF));\n\tuint glyphY = (glyph >> 4);\n\tuvec2 fontPosition = uvec2(glyphX, glyphY);\n\n\tuvec2 fontPx = (tileSize * fontPosition) + uvec2(vec2(tileSize) * fsUv);\n\tvec3 texel = texelFetch(font, ivec2(fontPx), 0).rgb;\n\n\tfloat s = 15.0;\n\tuint fr = (fsStyle & uint(0xF00)) >> 8;\n\tuint fg = (fsStyle & uint(0x0F0)) >> 4;\n\tuint fb = (fsStyle & uint(0x00F)) >> 0;\n\tvec3 fgRgb = vec3(fr, fg, fb) / s;\n  \n\tuint br = (fsStyle & uint(0xF00000)) >> 20;\n\tuint bg = (fsStyle & uint(0x0F0000)) >> 16;\n\tuint bb = (fsStyle & uint(0x00F000)) >> 12;\n\tvec3 bgRgb = vec3(br, bg, bb) / s;\n  \n\tfragColor = vec4(mix(bgRgb, fgRgb, texel), 1.0);\n}".trim();class h{constructor(t){if(this._data=new Uint32Array,this._buffers={},this._attribs={},this._uniforms={},this._renderRequested=!1,this._autoRender=!0,this._width=50,this._height=25,!t.glyphs)throw new Error("You must supply glyphs for the canvas.");this._gl=this._initGL(t.node),this._configure(t)}get node(){return this._gl.canvas}get width(){return this._width}get height(){return this._height}get tileWidth(){return this._glyphs.tileWidth}get tileHeight(){return this._glyphs.tileHeight}get pxWidth(){return this.node.width}get pxHeight(){return this.node.height}get glyphs(){return this._glyphs}set glyphs(t){const i=this._gl,e=this._uniforms;(t!==this._glyphs||t.needsUpdate)&&(t!==this._glyphs&&(this._glyphs=t,this.resize(this._width,this._height),i.uniform2uiv(e.tileSize,[this.tileWidth,this.tileHeight])),this._uploadGlyphs())}_configure(t){this._width=t.width||this._width,this._height=t.height||this._height,this._autoRender=!1!==t.render,this.glyphs=t.glyphs}resize(t,i){this._width=t,this._height=i;const e=this.node;e.width=this._width*this.tileWidth,e.height=this._height*this.tileHeight;const s=this._gl,h=this._uniforms;s.viewport(0,0,e.width,e.height),s.uniform2ui(h.viewportSize,e.width,e.height),this._createGeometry(),this._createData()}draw(t,i,e,s,h){let r=i*this._width+t;r*=6;const n=((e&=255)<<24)+((h&=4095)<<12)+(s&=4095);this._data[r+2]=n,this._data[r+5]=n,this._requestRender()}copy(t){t.data.forEach(((t,i)=>{const e=6*i;this._data[e+2]=t,this._data[e+5]=t})),this._requestRender()}copyTo(t){const i=this.width*this.height,e=t.data;for(let t=0;t<i;++t){const i=6*t;e[t]=this._data[i+2]}}_initGL(t){if("string"==typeof t){const i=document.getElementById(t);if(!i)throw new Error("Failed to find canvas with id:"+t);if(!(i instanceof HTMLCanvasElement))throw new Error("Canvas: node must be a canvas element.");t=i}else t||(t=document.createElement("canvas"));let i=t.getContext("webgl2");if(!i)throw new Error("WebGL 2 not supported");const h=function(t,...i){const e=t.createProgram();if([t.VERTEX_SHADER,t.FRAGMENT_SHADER].forEach(((s,h)=>{const r=t.createShader(s);if(t.shaderSource(r,i[h]),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r));t.attachShader(e,r)})),t.linkProgram(e),!t.getProgramParameter(e,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(e));return e}(i,e,s);i.useProgram(h);const r=i.getProgramParameter(h,i.ACTIVE_ATTRIBUTES);for(let t=0;t<r;t++){i.enableVertexAttribArray(t);let e=i.getActiveAttrib(h,t);this._attribs[e.name]=t}const n=i.getProgramParameter(h,i.ACTIVE_UNIFORMS);for(let t=0;t<n;t++){let e=i.getActiveUniform(h,t);this._uniforms[e.name]=i.getUniformLocation(h,e.name)}return i.uniform1i(this._uniforms.font,0),this._texture=function(t){let i=t.createTexture();return t.bindTexture(t.TEXTURE_2D,i),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),i}(i),i}_createGeometry(){const t=this._gl;this._buffers.position&&t.deleteBuffer(this._buffers.position),this._buffers.uv&&t.deleteBuffer(this._buffers.uv);let e=function(t,e,s,h){let r=s*h,n=new Uint16Array(r*i.length),a=new Uint8Array(r*i.length),o=0;for(let t=0;t<h;t++)for(let e=0;e<s;e++)i.forEach((i=>{n[o]=(o%2?t:e)+i,a[o]=i,o++}));const u=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,u),t.vertexAttribIPointer(e.position,2,t.UNSIGNED_SHORT,0,0),t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW);const l=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,l),t.vertexAttribIPointer(e.uv,2,t.UNSIGNED_BYTE,0,0),t.bufferData(t.ARRAY_BUFFER,a,t.STATIC_DRAW),{position:u,uv:l}}(t,this._attribs,this._width,this._height);Object.assign(this._buffers,e)}_createData(){const t=this._gl,i=this._attribs,e=this._width*this._height;this._buffers.style&&t.deleteBuffer(this._buffers.style),this._data=new Uint32Array(6*e);const s=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,s),t.vertexAttribIPointer(i.style,1,t.UNSIGNED_INT,0,0),Object.assign(this._buffers,{style:s})}_requestRender(){!this._renderRequested&&this._autoRender&&(this._renderRequested=!0,requestAnimationFrame((()=>this.render())))}render(){const t=this._gl;this._glyphs.needsUpdate&&this._uploadGlyphs(),this._renderRequested=!1,t.bindBuffer(t.ARRAY_BUFFER,this._buffers.style),t.bufferData(t.ARRAY_BUFFER,this._data,t.DYNAMIC_DRAW),t.drawArrays(t.TRIANGLES,0,this._width*this._height*6)}_uploadGlyphs(){if(!this._glyphs.needsUpdate)return;const t=this._gl;t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,this._texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,this._glyphs.node),this._requestRender(),this._glyphs.needsUpdate=!1}}class r{constructor(t={}){this._tileWidth=12,this._tileHeight=16,this.needsUpdate=!0,this._map={},t.font=t.font||"monospace",this._node=document.createElement("canvas"),this._ctx=this.node.getContext("2d"),this._configure(t)}static fromImage(t){if("string"==typeof t){if(t.startsWith("data:"))throw new Error("Glyph: You must load a data string into an image element and use that.");const i=document.getElementById(t);if(!i)throw new Error("Glyph: Failed to find image element with id:"+t);t=i}const i=new this({tileWidth:t.width/16,tileHeight:t.height/16});return i._ctx.drawImage(t,0,0),i}static fromFont(t){"string"==typeof t&&(t={font:t});const i=new this(t),e=t.basicOnly||t.basic||!1;return i._initGlyphs(e),i}get node(){return this._node}get tileWidth(){return this._tileWidth}get tileHeight(){return this._tileHeight}get pxWidth(){return this._node.width}get pxHeight(){return this._node.height}forChar(t){return this._map[t]||t.charCodeAt(0)%256}_configure(t){this._tileWidth=t.tileWidth||this.tileWidth,this._tileHeight=t.tileHeight||this.tileHeight,this.node.width=16*this.tileWidth,this.node.height=16*this.tileHeight,this._ctx.fillStyle="black",this._ctx.fillRect(0,0,this.pxWidth,this.pxHeight);const i=t.fontSize||t.size||Math.max(this.tileWidth,this.tileHeight);this._ctx.font=i+"px "+t.font,this._ctx.textAlign="center",this._ctx.textBaseline="middle",this._ctx.fillStyle="white"}draw(t,i){const e=t%16*this.tileWidth,s=Math.floor(t/16)*this.tileHeight,h=e+Math.floor(this.tileWidth/2),r=s+Math.floor(this.tileHeight/2);this._ctx.save(),this._ctx.beginPath(),this._ctx.rect(e,s,this.tileWidth,this.tileHeight),this._ctx.clip(),"function"==typeof i?i(this._ctx,e,s,this.tileWidth,this.tileHeight):(this._map[i]=t,this._ctx.fillText(i,h,r)),this._ctx.restore(),this.needsUpdate=!0}_initGlyphs(t=!1){for(let t=32;t<127;++t)this.draw(t,String.fromCharCode(t));t||([" ","☺","☻","♥","♦","♣","♠","☼","☀","★","☆","♂","♀","♪","♫","☸","▶","◀","↕","‼","⁋","☯","⌘","☖","↑","↓","→","←","Ω","↔","▲","▼"].forEach(((t,i)=>{this.draw(i,t)})),["⌂","⬉","✪","✘","☐","☑","◯","◎","⚐","⚑","▘","▖","▝","▗","❄","✭","✧","◣","◤","◢","◥","▨","▧","▚","♟","♜","♞","♝","♛","♚","〜","⚔","⚒","▶","▼","◀","▲","▤","▥","▦","╺","╻","╸","╹","▁","▔","▏","▕","✭","░","▒","▓","┃","┫","╡","╢","╖","╕","╣","║","╗","╝","╜","╛","┓","┗","┻","┳","┣","━","╋","╞","╟","╚","╔","╩","╦","╠","═","╬","╧","╨","╤","╥","╙","╘","╒","╓","╫","╪","┛","┏","█","▅","▌","▐","▀","α","β","Γ","π","Σ","σ","μ","τ","Φ","θ","Ω","δ","∞","θ","ε","η","Ξ","±","≥","≤","∴","∷","÷","≈","⋄","⋅","∗","➵","☠","☥","◼","◻"].forEach(((t,i)=>{this.draw(i+127,t)})))}}var n={random:Math.random.bind(Math)};class a{constructor(t=-1,i=0,e=0,s=0,h=0,r=0,n=0){this._data=[t,i,e,s,h,r,n]}static fromArray(t,i=!1){if(t.length<3)throw new Error("Colors must have 3 values.");return i&&(t=t.map((t=>Math.round(100*t/255)))),new this(t[0],t[1],t[2])}static fromString(t){if(!t.startsWith("#"))throw new Error('Color strings must be of form "#abc" or "#abcdef"');const i=Number.parseInt(t.substring(1),16);let e,s,h;return 4==t.length?(e=Math.round((i>>8)/15*100),s=Math.round(((240&i)>>4)/15*100),h=Math.round((15&i)/15*100)):(e=Math.round((i>>16)/255*100),s=Math.round(((65280&i)>>8)/255*100),h=Math.round((255&i)/255*100)),new this(e,s,h)}static fromNumber(t,i=!1){const e=new this;return e.fromInt(t,i),e}static make(t,i=!1){if(t instanceof this)return t.clone();if("string"==typeof t)return this.fromString(t);if(Array.isArray(t))return this.fromArray(t,i);if("number"==typeof t)return this.fromNumber(t,i);throw new Error("Failed to make color - unknown argument: "+JSON.stringify(t))}static from(t,i=!1){return t instanceof this?t:-1==t?new this:this.make(t,i)}get r(){return Math.round(2.55*this._data[0])}get _r(){return this._data[0]}set _r(t){this._data[0]=t}get g(){return Math.round(2.55*this._data[1])}get _g(){return this._data[1]}set _g(t){this._data[1]=t}get b(){return Math.round(2.55*this._data[2])}get _b(){return this._data[2]}set _b(t){this._data[2]=t}get _rand(){return this._data[3]}get _redRand(){return this._data[4]}get _greenRand(){return this._data[5]}get _blueRand(){return this._data[6]}get l(){return Math.round(.5*(Math.min(this._r,this._g,this._b)+Math.max(this._r,this._g,this._b)))}get s(){return this.l>=100?0:Math.round((Math.max(this._r,this._g,this._b)-Math.min(this._r,this._g,this._b))*(100-Math.abs(2*this.l-100))/100)}get h(){let t=0,i=this.r,e=this.g,s=this.b;return i>=e&&e>=s?t=(e-s)/(i-s)*60:e>i&&i>=s?t=60*(2-(i-s)/(e-s)):e>=s&&s>i?t=60*(2+(s-i)/(e-i)):s>e&&e>i?t=60*(4-(e-i)/(s-i)):s>i&&i>=e?t=60*(4+(i-e)/(s-e)):i>=s&&s>e&&(t=60*(6-(s-e)/(i-e))),Math.round(t)}isNull(){return this._r<0}equals(t){const i=(t=a.from(t))._data;return this._data.every(((t,e)=>t==(i[e]||0)))}copy(t){return t=a.from(t),this.set(...t._data)}clone(){const t=new a;return t.copy(this),t}set(t=0,i=0,e=0,s=0,h=0,r=0,n=0){for(let t=0;t<this._data.length;++t)this._data[t]=arguments[t]||0;return this}setRGB(t=0,i=0,e=0,s=0,h=0,r=0,n=0){for(let t=0;t<this._data.length;++t)this._data[t]=Math.round((arguments[t]||0)/2.55);return this}nullify(){return this.set(-1,0,0)}blackOut(){return this.set(0,0,0)}toInt(t=!1){if(this.isNull())return-1;if(t){return((255&Math.round(this._r/100*255))<<16)+((255&Math.round(this._g/100*255))<<8)+(255&Math.round(this._b/100*255))}return((15&Math.round(this._r/100*15))<<8)+((15&Math.round(this._g/100*15))<<4)+(15&Math.round(this._b/100*15))}fromInt(t,i=!1){for(let t=0;t<this._data.length;++t)this._data[t]=0;if(t<0)this._r=-1;else{if(i)return this._r=Math.round(100*(t>>16)/255),this._g=Math.round(100*((65280&t)>>8)/255),this._b=Math.round(100*(255&t)/255),this;this._r=Math.round(100*(t>>8)/15),this._g=Math.round(100*((240&t)>>4)/15),this._b=Math.round(100*(15&t)/15)}return this}clamp(){return this.isNull()||(this._r=Math.min(100,Math.max(0,this._r)),this._g=Math.min(100,Math.max(0,this._g)),this._b=Math.min(100,Math.max(0,this._b))),this}mix(t,i){if((t=a.from(t)).isNull())return this;this.isNull()&&this.blackOut();const e=t._data,s=100-(i=Math.min(100,Math.max(0,i)));for(let t=0;t<this._data.length;++t)this._data[t]=Math.round((this._data[t]*s+e[t]*i)/100);return this}lighten(t){if(this.isNull())return this;if(0==(t=Math.min(100,Math.max(0,t))))return;const i=100-t;for(let e=0;e<3;++e)this._data[e]=Math.round((this._data[e]*i+100*t)/100);return this}darken(t){if(this.isNull())return this;if(0==(t=Math.min(100,Math.max(0,t))))return;const i=100-t;for(let e=0;e<3;++e)this._data[e]=Math.round((this._data[e]*i+0*t)/100);return this}bake(){if(this.isNull())return this;const t=this._rand?Math.floor(n.random()*this._rand):0,i=this._redRand?Math.floor(n.random()*this._redRand):0,e=this._greenRand?Math.floor(n.random()*this._greenRand):0,s=this._blueRand?Math.floor(n.random()*this._blueRand):0;this._r+=t+i,this._g+=t+e,this._b+=t+s;for(let t=3;t<this._data.length;++t)this._data[t]=0;return this}add(t,i=100){if((t=a.from(t)).isNull())return this;this.isNull()&&this.blackOut();const e=t._data;for(let t=0;t<this._data.length;++t)this._data[t]+=Math.round(e[t]*i/100);return this}scale(t){if(this.isNull())return this;t=Math.max(0,t);for(let i=0;i<this._data.length;++i)this._data[i]=Math.round(this._data[i]*t/100);return this}multiply(t){if((t=a.from(t)).isNull())return this;if(this.isNull())return this;const i=t._data;for(let t=0;t<this._data.length;++t)this._data[t]=Math.round(this._data[t]*i[t]/100);return this}normalize(){if(this.isNull())return this;const t=Math.max(this._r,this._g,this._b);return t<=100||(this._r=Math.round(100*this._r/t),this._g=Math.round(100*this._g/t),this._b=Math.round(100*this._b/t)),this}toString(t=!1){return this.isNull()?"null color":"#"+this.toInt(t).toString(16).padStart(t?6:3,"0")}static separate(t,i){if(t.isNull()||i.isNull())return;const e=t.clone().clamp(),s=i.clone().clamp();let h=Math.abs(e.h-s.h);if(h>180&&(h=360-h),h>45)return;if(Math.abs(e.l-s.l)>=40)return;const[r,n]=[e,s].sort(((t,i)=>t.s-i.s));for(;n.l-r.l<40;)n.mix(u,5),r.mix(o,5);t.copy(e),i.copy(s)}}const o=new a(0,0,0),u=new a(100,100,100);class l{constructor(){this.ch=0,this.fg=new a,this.bg=new a}copy(t){return this.ch=t.ch,this.fg.copy(t.fg),this.bg.copy(t.bg),this}clone(){const t=new l;return t.copy(this),t}nullify(){return this.ch=0,this.fg.nullify(),this.bg.nullify(),this}blackOut(){return this.ch=0,this.fg.blackOut(),this.bg.blackOut(),this}draw(t=-1,i=-1,e=-1){-1!==t&&(this.ch=t),-1!=i&&(i=a.from(i),this.fg.copy(i)),-1!=e&&(e=a.from(e),this.bg.copy(e))}drawSprite(t,i=100){if(!(i<=0))return t.ch&&(this.ch=t.ch),t.fg&&this.fg.mix(t.fg,i),t.bg&&this.bg.mix(t.bg,i),this}invert(){return[this.bg,this.fg]=[this.fg,this.bg],this}multiply(t,i=!0,e=!0){return t=a.from(t),i&&this.fg.multiply(t),e&&this.bg.multiply(t),this}mix(t,i=100,e=i){return t=a.from(t),i>0&&this.fg.mix(t,i),e>0&&this.bg.mix(t,e),this}add(t,i=100,e=i){return t=a.from(t),i>0&&this.fg.add(t,i),e>0&&this.bg.add(t,e),this}separate(){return a.separate(this.fg,this.bg),this}bake(){return this.fg.bake(),this.bg.bake(),{ch:this.ch,fg:this.fg.toInt(),bg:this.bg.toInt()}}}var d={__proto__:null,Canvas:h,Glyphs:r,Buffer:class{constructor(t){this._canvas=t,this._data=new Uint32Array(t.width*t.height),t.copyTo(this)}get data(){return this._data}get width(){return this._canvas.width}get height(){return this._canvas.height}get(t,i){let e=i*this.width+t;const s=this._data[e]||0;return{glyph:s>>24,fg:4095&s,bg:s>>12&4095}}draw(t,i,e=-1,s=-1,h=-1){let r=i*this.width+t;const n=this._data[r]||0;"string"==typeof e&&(e=this._canvas.glyphs.forChar(e)),s instanceof a&&(s=s.toInt()),h instanceof a&&(h=h.toInt());const o=((e=e>=0?255&e:n>>24)<<24)+((h=h>=0?4095&h:n>>12&4095)<<12)+(s=s>=0?4095&s:4095&n);return this._data[r]=o,this}drawSprite(t,i,e){const s=e.ch?e.ch:e.glyph;return this.draw(t,i,s,e.fg,e.bg)}blackOut(t,i){return this.draw(t,i,0,0,0)}fill(t=0,i=4095,e=0){"string"==typeof t&&(t=this._canvas.glyphs.forChar(t));const s=((t&=255)<<24)+((e&=4095)<<12)+(i&=4095);return this._data.fill(s),this}copy(t){return this._data.set(t._data),this}render(){return this._canvas.copy(this),this}copyFromCanvas(){return this._canvas.copyTo(this),this}},Color:a,Mixer:l,withImage:function(t){let i={};if("string"==typeof t)i.glyphs=r.fromImage(t);else if(t instanceof HTMLImageElement)i.glyphs=r.fromImage(t);else{if(!t.image)throw new Error("You must supply the image.");Object.assign(i,t),i.glyphs=r.fromImage(t.image)}return new h(i)},withFont:function(t){return"string"==typeof t&&(t={font:t}),t.glyphs=r.fromFont(t),new h(t)},configure:function(t={}){Object.assign(n,t)}};t.canvas=d,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=gw-canvas.min.js.map
